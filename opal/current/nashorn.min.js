Opal.modules["nashorn/io"]=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}Opal.top;var $writer,nil=Opal.nil,$send=(Opal.$$$,Opal.$$,Opal.send),$gvars=Opal.gvars;return null==$gvars.stdout&&($gvars.stdout=nil),null==$gvars.stderr&&($gvars.stderr=nil),Opal.add_stubs(["$write_proc=","$-"]),$writer=[function(s){print(s)}],$send($gvars.stdout,"write_proc=",Opal.to_a($writer)),$rb_minus($writer.length,1),$writer=[function(s){print(s)}],$send($gvars.stderr,"write_proc=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},Opal.modules["nashorn/file"]=function(Opal){Opal.top;var $nesting=[],nil=Opal.nil,$klass=(Opal.$$$,Opal.$$,Opal.klass);return function($File_readable$ques$3,$File_file$ques$2){$File_readable$ques$3=$klass($File_readable$ques$3,null,"File"),[$File_readable$ques$3].concat($File_file$ques$2);return Opal.defs($File_readable$ques$3,"$read",$File_file$ques$2=function(lines){var Paths=Java.type("java.nio.file.Paths"),lines=Java.type("java.nio.file.Files").readAllLines(Paths.get(lines),Java.type("java.nio.charset.StandardCharsets").UTF_8),data=[];return lines.forEach(function(line){data.push(line)}),data.join("\n")},$File_file$ques$2.$$arity=1),Opal.defs($File_readable$ques$3,"$file?",$File_file$ques$2=function(path){var Files=Java.type("java.nio.file.Files");return Files.exists(path)&&Files.isRegularFile(path)},$File_file$ques$2.$$arity=1),Opal.defs($File_readable$ques$3,"$readable?",$File_readable$ques$3=function(path){var Files=Java.type("java.nio.file.Files");return Files.exists(path)&&Files.isReadable(path)},$File_readable$ques$3.$$arity=1),nil&&"readable?"}($nesting[0],$nesting)},Opal.modules.nashorn=function(Opal){var self=Opal.top,$parent_nesting=[],$module=(Opal.nil,Opal.$$$,Opal.$$,Opal.module);return Opal.add_stubs(["$require"]),[$module(($parent_nesting=$parent_nesting)[0],"Nashorn")].concat($parent_nesting),self.$require("nashorn/io"),self.$require("nashorn/file")};
