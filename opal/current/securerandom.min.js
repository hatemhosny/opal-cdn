Opal.modules.securerandom=function(Opal){Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.$$$,Opal.$$),$module=Opal.module,$truthy=Opal.truthy,$send=Opal.send;return Opal.add_stubs(["$to_int","$<","$raise","$gsub"]),function($SecureRandom_uuid$2,$SecureRandom_hex$1){var $SecureRandom_uuid$2=$module($SecureRandom_uuid$2,"SecureRandom"),$nesting=[$SecureRandom_uuid$2].concat($SecureRandom_hex$1);Opal.defs($SecureRandom_uuid$2,"$hex",$SecureRandom_hex$1=function(remain_total){var lhs=nil;null==remain_total&&(remain_total=nil),remain_total=$truthy(lhs=remain_total)?lhs:16,$truthy("number"==typeof remain_total)||(remain_total=remain_total.$to_int()),$truthy((remain=0,"number"==typeof(lhs=remain_total)&&"number"==typeof remain?lhs<remain:lhs["$<"](remain)))&&this.$raise($$($nesting,"ArgumentError"),"count of hex numbers must be positive"),remain_total=Math.floor(remain_total);for(var temp,repeat=Math.floor(remain_total/6),remain=remain_total%6,remain_total=2*remain,string="",i=0;i<repeat;i++)(temp=Math.floor(0xffffffffffff*Math.random()).toString(16)).length<12&&(temp="0".repeat(12-temp.length)+temp),string+=temp;return 0<remain&&((temp=Math.floor(Math.random()*parseInt("ff".repeat(remain),16)).toString(16)).length<remain_total&&(temp="0".repeat(remain_total-temp.length)+temp),string+=temp),string},$SecureRandom_hex$1.$$arity=-1),Opal.defs($SecureRandom_uuid$2,"$uuid",$SecureRandom_uuid$2=function(){var $$3;return $send("xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx","gsub",[/[xy]/],(($$3=function(ch){null==$$3.$$s||$$3.$$s;null==ch&&(ch=nil);var r=16*Math.random()|0;return("x"==ch?r:3&r|8).toString(16)}).$$s=this,$$3.$$arity=1,$$3.$$has_trailing_comma_in_args=!0,$$3))},$SecureRandom_uuid$2.$$arity=0)}($nesting[0],$nesting)};
