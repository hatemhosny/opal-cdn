Opal.modules.ostruct=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.$$$,Opal.$$),$klass=Opal.klass,$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$range=Opal.range,$send2=Opal.send2;return Opal.add_stubs(["$each_pair","$new_ostruct_member","$[]=","$-","$[]","$to_sym","$>","$length","$raise","$new","$end_with?","$!=","$chomp","$to_s","$key?","$enum_for","$is_a?","$==","$instance_variable_get","$===","$eql?","$dup","$to_n","$hash","$attr_reader","$__send__","$singleton_class","$delete","$respond_to?","$define_singleton_method","$__id__","$class","$any?","$+","$join","$map","$inspect"]),function(self,$OpenStruct_inspect$19){var $OpenStruct_respond_to_missing$ques$6,$OpenStruct_each_pair$7,ostruct_ids,self=$klass(self,null,"OpenStruct"),$nesting=[self].concat($OpenStruct_inspect$19);return self.$$prototype.table=nil,Opal.def(self,"$initialize",$OpenStruct_inspect$19=function(hash){var $$2;return null==hash&&(hash=nil),this.table=$hash2([],{}),$truthy(hash)?$send(hash,"each_pair",[],(($$2=function(key,value){var $writer,self=null==$$2.$$s?this:$$2.$$s;return null==self.table&&(self.table=nil),null==key&&(key=nil),null==value&&(value=nil),$writer=[self.$new_ostruct_member(key),value],$send(self.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]}).$$s=this,$$2.$$arity=2,$$2)):nil},$OpenStruct_inspect$19.$$arity=-1),Opal.def(self,"$[]",$OpenStruct_inspect$19=function(name){return this.table["$[]"](name.$to_sym())},$OpenStruct_inspect$19.$$arity=1),Opal.def(self,"$[]=",$OpenStruct_inspect$19=function(name,value){var $writer=[this.$new_ostruct_member(name),value];return $send(this.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},$OpenStruct_inspect$19.$$arity=2),Opal.def(self,"$method_missing",$OpenStruct_inspect$19=function(name,$a){var $writer,lhs,rhs,args=Opal.slice.call(arguments,1,arguments.length);return $truthy((lhs=args.$length(),rhs=2,"number"==typeof lhs&&"number"==typeof rhs?rhs<lhs:lhs["$>"](rhs)))&&this.$raise($$($nesting,"NoMethodError").$new("undefined method `"+name+"' for #<OpenStruct>",name)),$truthy(name["$end_with?"]("="))?($truthy(args.$length()["$!="](1))&&this.$raise($$($nesting,"ArgumentError"),"wrong number of arguments (0 for 1)"),$writer=[this.$new_ostruct_member(name["$[]"]($range(0,-2,!1))),args["$[]"](0)],$send(this.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]):this.table["$[]"](name.$to_sym())},$OpenStruct_inspect$19.$$arity=-2),Opal.def(self,"$respond_to_missing?",$OpenStruct_respond_to_missing$ques$6=function(mid,include_private){var $a,mname,$zuper_ii,$iter=$OpenStruct_respond_to_missing$ques$6.$$p,$ret_or_1=nil,$zuper=nil,$zuper_i=nil;for($iter&&($OpenStruct_respond_to_missing$ques$6.$$p=null),$zuper_i=0,$zuper_ii=arguments.length,$zuper=new Array($zuper_ii);$zuper_i<$zuper_ii;$zuper_i++)$zuper[$zuper_i]=arguments[$zuper_i];return null==include_private&&(include_private=!1),mname=mid.$to_s().$chomp("=").$to_sym(),$truthy($ret_or_1=($a=this.table)===nil||null==$a?nil:$send($a,"key?",[mname]))?$ret_or_1:$send2(this,Opal.find_super_dispatcher(this,"respond_to_missing?",$OpenStruct_respond_to_missing$ques$6,!1,!0),"respond_to_missing?",$zuper,$iter)},$OpenStruct_respond_to_missing$ques$6.$$arity=-2),Opal.def(self,"$each_pair",$OpenStruct_each_pair$7=function(){var $$8,$iter=$OpenStruct_each_pair$7.$$p,$yield=$iter||nil;return $iter&&($OpenStruct_each_pair$7.$$p=null),$yield===nil?this.$enum_for("each_pair"):$send(this.table,"each_pair",[],(($$8=function(pair){null==$$8.$$s||$$8.$$s;return null==pair&&(pair=nil),Opal.yield1($yield,pair)}).$$s=this,$$8.$$arity=1,$$8))},$OpenStruct_each_pair$7.$$arity=0),Opal.def(self,"$==",$OpenStruct_inspect$19=function(other){return!!$truthy(other["$is_a?"]($$($nesting,"OpenStruct")))&&this.table["$=="](other.$instance_variable_get("@table"))},$OpenStruct_inspect$19.$$arity=1),Opal.def(self,"$===",$OpenStruct_inspect$19=function(other){return!!$truthy(other["$is_a?"]($$($nesting,"OpenStruct")))&&this.table["$==="](other.$instance_variable_get("@table"))},$OpenStruct_inspect$19.$$arity=1),Opal.def(self,"$eql?",$OpenStruct_inspect$19=function(other){return!!$truthy(other["$is_a?"]($$($nesting,"OpenStruct")))&&this.table["$eql?"](other.$instance_variable_get("@table"))},$OpenStruct_inspect$19.$$arity=1),Opal.def(self,"$to_h",$OpenStruct_inspect$19=function(){return this.table.$dup()},$OpenStruct_inspect$19.$$arity=0),Opal.def(self,"$to_n",$OpenStruct_inspect$19=function(){return this.table.$to_n()},$OpenStruct_inspect$19.$$arity=0),Opal.def(self,"$hash",$OpenStruct_inspect$19=function(){return this.table.$hash()},$OpenStruct_inspect$19.$$arity=0),self.$attr_reader("table"),Opal.def(self,"$delete_field",$OpenStruct_inspect$19=function(name){var sym=name.$to_sym();try{this.$singleton_class().$__send__("remove_method",sym,sym+"=")}catch($err){if(!Opal.rescue($err,[$$($nesting,"NameError")]))throw $err;Opal.pop_exception()}return this.table.$delete(sym)},$OpenStruct_inspect$19.$$arity=1),Opal.def(self,"$new_ostruct_member",$OpenStruct_inspect$19=function(name){var $$17,$$18;return name=name.$to_sym(),$truthy(this["$respond_to?"](name))||($send(this,"define_singleton_method",[name],(($$17=function(){var self=null==$$17.$$s?this:$$17.$$s;return null==self.table&&(self.table=nil),self.table["$[]"](name)}).$$s=this,$$17.$$arity=0,$$17)),$send(this,"define_singleton_method",[name+"="],(($$18=function(x){var $writer,self=null==$$18.$$s?this:$$18.$$s;return null==self.table&&(self.table=nil),null==x&&(x=nil),$writer=[name,x],$send(self.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]}).$$s=this,$$18.$$arity=1,$$18))),name},$OpenStruct_inspect$19.$$arity=1),Opal.def(self,"$inspect",$OpenStruct_inspect$19=function(){var $$20,self=this,result=nil,top=void 0===ostruct_ids,ostruct_id=self.$__id__();return function(){try{return(result="#<"+self.$class(),top&&(ostruct_ids={}),ostruct_ids.hasOwnProperty(ostruct_id))?result+" ...>":(ostruct_ids[ostruct_id]=!0,$truthy(self.table["$any?"]())&&(result=$rb_plus(result," ")),result=$rb_plus(result,$send(self.$each_pair(),"map",[],(($$20=function(name,value){null==$$20.$$s||$$20.$$s;return null==name&&(name=nil),null==value&&(value=nil),name+"="+value.$inspect()}).$$s=self,$$20.$$arity=2,$$20)).$join(", ")),result=$rb_plus(result,">"))}finally{top&&(ostruct_ids=void 0)}}()},$OpenStruct_inspect$19.$$arity=0),Opal.alias(self,"to_s","inspect")}($nesting[0],$nesting)};
