Opal.modules.stringio=function(Opal){function $rb_gt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?rhs<lhs:lhs["$>"](rhs)}function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$$=Opal.const_get_qualified,$$=Opal.const_get_relative,$klass=(Opal.breaker,Opal.slice,Opal.klass),$truthy=Opal.truthy,$gvars=Opal.gvars;return Opal.add_stubs(["$include","$new","$call","$close","$attr_accessor","$length","$include?","$!","$check_readable","$==","$===","$>=","$raise","$>","$+","$-","$seek","$enum_for","$eof?","$ord","$[]","$to_str","$chomp","$check_writable","$String","$write","$closed_write?","$closed_read?"]),function($base,$super,$parent_nesting){var $StringIO_open$1,$StringIO_initialize$2,$StringIO_eof$ques$3,$StringIO_seek$4,$StringIO_tell$5,$StringIO_rewind$6,$StringIO_each_byte$7,$StringIO_each_char$8,$StringIO_each$9,$StringIO_write$10,$StringIO_read$11,$StringIO_close$12,$StringIO_close_read$13,$StringIO_close_write$14,$StringIO_closed$ques$15,$StringIO_closed_read$ques$16,$StringIO_closed_write$ques$17,$StringIO_check_writable$18,$StringIO_check_readable$19,self=$klass($base,$super,"StringIO"),$nesting=[self].concat($parent_nesting);return self.$$prototype.position=self.$$prototype.string=self.$$prototype.closed=nil,self.$include($$$($$($nesting,"IO"),"Readable")),self.$include($$$($$($nesting,"IO"),"Writable")),Opal.defs(self,"$open",$StringIO_open$1=function(string,mode){var res,$iter=$StringIO_open$1.$$p,block=$iter||nil,io=nil;return $iter&&($StringIO_open$1.$$p=null),$iter&&($StringIO_open$1.$$p=null),null==string&&(string=""),null==mode&&(mode=nil),io=this.$new(string,mode),res=block.$call(io),io.$close(),res},$StringIO_open$1.$$arity=-1),self.$attr_accessor("string"),Opal.def(self,"$initialize",$StringIO_initialize$2=function(string,mode){var $a;return null==string&&(string=""),null==mode&&(mode="rw"),this.string=string,this.position=string.$length(),$truthy($truthy($a=mode["$include?"]("r"))?mode["$include?"]("w")["$!"]():$a)?this.closed="write":$truthy($truthy($a=mode["$include?"]("w"))?mode["$include?"]("r")["$!"]():$a)?this.closed="read":nil},$StringIO_initialize$2.$$arity=-1),Opal.def(self,"$eof?",$StringIO_eof$ques$3=function(){return this.$check_readable(),this.position["$=="](this.string.$length())},$StringIO_eof$ques$3.$$arity=0),Opal.alias(self,"eof","eof?"),Opal.def(self,"$seek",$StringIO_seek$4=function(pos,whence){var $case,lhs,rhs;return null==whence&&(whence=$$$($$($nesting,"IO"),"SEEK_SET")),$case=whence,$$$($$($nesting,"IO"),"SEEK_SET")["$==="]($case)?($truthy((rhs=0,"number"==typeof(lhs=pos)&&"number"==typeof rhs?rhs<=lhs:lhs["$>="](rhs)))||this.$raise($$$($$($nesting,"Errno"),"EINVAL")),this.position=pos):$$$($$($nesting,"IO"),"SEEK_CUR")["$==="]($case)?$truthy($rb_gt($rb_plus(this.position,pos),this.string.$length()))?this.position=this.string.$length():this.position=$rb_plus(this.position,pos):$$$($$($nesting,"IO"),"SEEK_END")["$==="]($case)&&($truthy($rb_gt(pos,this.string.$length()))?this.position=0:this.position=$rb_minus(this.position,pos)),0},$StringIO_seek$4.$$arity=-2),Opal.def(self,"$tell",$StringIO_tell$5=function(){return this.position},$StringIO_tell$5.$$arity=0),Opal.alias(self,"pos","tell"),Opal.alias(self,"pos=","seek"),Opal.def(self,"$rewind",$StringIO_rewind$6=function(){return this.$seek(0)},$StringIO_rewind$6.$$arity=0),Opal.def(self,"$each_byte",$StringIO_each_byte$7=function(){var $iter=$StringIO_each_byte$7.$$p,block=$iter||nil,i=nil;if($iter&&($StringIO_each_byte$7.$$p=null),$iter&&($StringIO_each_byte$7.$$p=null),!$truthy(block))return this.$enum_for("each_byte");for(this.$check_readable(),i=this.position;!$truthy(this["$eof?"]());)block.$call(this.string["$[]"](i).$ord()),i=$rb_plus(i,1);return this},$StringIO_each_byte$7.$$arity=0),Opal.def(self,"$each_char",$StringIO_each_char$8=function(){var $iter=$StringIO_each_char$8.$$p,block=$iter||nil,i=nil;if($iter&&($StringIO_each_char$8.$$p=null),$iter&&($StringIO_each_char$8.$$p=null),!$truthy(block))return this.$enum_for("each_char");for(this.$check_readable(),i=this.position;!$truthy(this["$eof?"]());)block.$call(this.string["$[]"](i)),i=$rb_plus(i,1);return this},$StringIO_each_char$8.$$arity=0),Opal.def(self,"$each",$StringIO_each$9=function(separator){var $iter=$StringIO_each$9.$$p,$yield=$iter||nil,chomp_lines=nil;if(null==$gvars["/"]&&($gvars["/"]=nil),$iter&&($StringIO_each$9.$$p=null),null==separator&&(separator=$gvars["/"]),$yield===nil)return this.$enum_for("each_line");this.$check_readable(),chomp_lines=!1,separator=$truthy($$$("::","Hash")["$==="](separator))?$truthy(chomp_lines=separator["$[]"]("chomp"))?/\r?\n/:$gvars["/"]:$truthy(separator)?separator.$to_str():void 0;var str=this.string,stringLength=str.length;if(this.position<stringLength&&(str=str.substr(this.position)),separator)for(var chomped=str.$chomp(),trailing=str.length!==chomped.length,splitted=chomped.split(separator),i=0,len=splitted.length;i<len;i++){var line=chomp_lines?splitted[i]:i<len-1||trailing?splitted[i]+separator:splitted[i];Opal.yield1($yield,line)}else if(void 0===separator)Opal.yield1($yield,str);else for(var m,re=/(.+(?:\n\n|$))\n*/g;m=re.exec(str);)Opal.yield1($yield,m[1]);return this.position=stringLength,this},$StringIO_each$9.$$arity=-1),Opal.alias(self,"each_line","each"),Opal.def(self,"$write",$StringIO_write$10=function(string){var before=nil,after=nil;return this.$check_writable(),string=this.$String(string),this.string.$length()["$=="](this.position)?this.string=$rb_plus(this.string,string):(before=this.string["$[]"](Opal.Range.$new(0,$rb_minus(this.position,1),!1)),after=this.string["$[]"](Opal.Range.$new($rb_plus(this.position,string.$length()),-1,!1)),this.string=$rb_plus($rb_plus(before,string),after)),this.position=$rb_plus(this.position,string.$length())},$StringIO_write$10.$$arity=1),Opal.def(self,"$read",$StringIO_read$11=function(length,outbuf){var self=this,string=nil,str=nil;return null==length&&(length=nil),null==outbuf&&(outbuf=nil),self.$check_readable(),$truthy(self["$eof?"]())?nil:($truthy(length)?(str=self.string["$[]"](self.position,length),self.position=$rb_plus(self.position,length)):(str=self.string["$[]"](Opal.Range.$new(self.position,-1,!1)),self.position=self.string.$length()),string=str,$truthy(outbuf)?outbuf.$write(string):string)},$StringIO_read$11.$$arity=-1),Opal.def(self,"$close",$StringIO_close$12=function(){return this.closed="both"},$StringIO_close$12.$$arity=0),Opal.def(self,"$close_read",$StringIO_close_read$13=function(){return this.closed["$=="]("write")?this.closed="both":this.closed="read"},$StringIO_close_read$13.$$arity=0),Opal.def(self,"$close_write",$StringIO_close_write$14=function(){return this.closed["$=="]("read")?this.closed="both":this.closed="write"},$StringIO_close_write$14.$$arity=0),Opal.def(self,"$closed?",$StringIO_closed$ques$15=function(){return this.closed["$=="]("both")},$StringIO_closed$ques$15.$$arity=0),Opal.def(self,"$closed_read?",$StringIO_closed_read$ques$16=function(){var $a;return $truthy($a=this.closed["$=="]("read"))?$a:this.closed["$=="]("both")},$StringIO_closed_read$ques$16.$$arity=0),Opal.def(self,"$closed_write?",$StringIO_closed_write$ques$17=function(){var $a;return $truthy($a=this.closed["$=="]("write"))?$a:this.closed["$=="]("both")},$StringIO_closed_write$ques$17.$$arity=0),Opal.def(self,"$check_writable",$StringIO_check_writable$18=function(){return $truthy(this["$closed_write?"]())?this.$raise($$($nesting,"IOError"),"not opened for writing"):nil},$StringIO_check_writable$18.$$arity=0),Opal.def(self,"$check_readable",$StringIO_check_readable$19=function(){return $truthy(this["$closed_read?"]())?this.$raise($$($nesting,"IOError"),"not opened for reading"):nil},$StringIO_check_readable$19.$$arity=0),nil&&"check_readable"}($nesting[0],$$($nesting,"IO"),$nesting)},Opal.modules["corelib/pack_unpack/format_string_parser"]=function(Opal){Opal.top;var $nesting=[],$$=(Opal.nil,Opal.const_get_qualified,Opal.const_get_relative),$module=(Opal.breaker,Opal.slice,Opal.module);return Opal.add_stubs(["$raise"]),function($base,$parent_nesting){var self=$module($base,"PackUnpack"),$nesting=[self].concat($parent_nesting),directives=["C","S","L","Q","J","c","s","l","q","j","n","N","v","V","U","w","D","d","F","f","E","e","G","g","A","a","Z","B","b","H","h","u","M","m","P","p","@","X","x"],modifiers=["!","_",">","<"];self.eachDirectiveAndCount=function(format,callback){var currentDirective,currentCount,currentModifiers,countSpecified;function reset(){currentDirective=null,currentCount=0,countSpecified=!(currentModifiers=[])}function yieldAndReset(){null!=currentDirective?(!/[sSiIlLqQjJ]/.test(currentDirective)&&0<currentModifiers.length&&self.$raise($$($nesting,"ArgumentError"),"'"+currentModifiers[0]+"' allowed only after types sSiIlLqQjJ"),-1!==currentModifiers.indexOf("<")&&-1!==currentModifiers.indexOf(">")&&self.$raise($$($nesting,"RangeError"),"Can't use both '<' and '>'"),countSpecified||(currentCount=1),-1!==currentModifiers.indexOf(">")&&(currentDirective+=">"),callback(currentDirective,currentCount),reset()):reset()}reset();for(var i=0;i<format.length;i++){var currentChar=format[i];-1!==directives.indexOf(currentChar)?(yieldAndReset(),currentDirective=currentChar):currentDirective&&(/\d/.test(currentChar)?(currentCount=10*currentCount+parseInt(currentChar,10),countSpecified=!0):"*"===currentChar&&!1===countSpecified?(currentCount=1/0,countSpecified=!0):-1!==modifiers.indexOf(currentChar)&&!1===countSpecified?currentModifiers.push(currentChar):yieldAndReset())}yieldAndReset()}}($nesting[0],$nesting)},Opal.modules["corelib/array/pack"]=function(Opal){var self=Opal.top,$nesting=[],nil=Opal.nil,$$=(Opal.const_get_qualified,Opal.const_get_relative),$klass=(Opal.breaker,Opal.slice,Opal.klass);return Opal.add_stubs(["$require","$coerce_to","$raise","$delete","$gsub","$coerce_to!","$inspect"]),self.$require("corelib/pack_unpack/format_string_parser"),function($base,$super,$parent_nesting){var $Array_pack$1,self=$klass($base,null,"Array"),$nesting=[self].concat($parent_nesting),eachDirectiveAndCount=Opal.PackUnpack.eachDirectiveAndCount;function identityFunction(value){return value}function asciiBytesToUtf16LEString(bytes){return String.fromCharCode.apply(null,bytes)}function asciiStringFromUnsignedInt(bytes,callback){return function(data){return callback(data).map(function(item){for(var result=[],i=0;i<bytes;i++){var bit=255&item;result.push(bit),item>>=8}return asciiBytesToUtf16LEString(result)})}}function asciiStringFromSignedInt(bytes,callback){return function(data){var buffer=callback(data),bits=8*bytes,limit=Math.pow(2,bits);return buffer.map(function(item){item<0&&(item+=limit);for(var result=[],i=0;i<bytes;i++){var bit=255&item;result.push(bit),item>>=8}return asciiBytesToUtf16LEString(result)})}}function toInt(callback){return function(data){return callback(data).map(function(item){return $$($nesting,"Opal").$coerce_to(item,$$($nesting,"Integer"),"to_int")})}}function joinChars(callback){return function(data){return callback(data).join("")}}var callback,handlers={C:joinChars(asciiStringFromUnsignedInt(1,toInt(identityFunction))),S:joinChars(asciiStringFromUnsignedInt(2,toInt(identityFunction))),L:joinChars(asciiStringFromUnsignedInt(4,toInt(identityFunction))),Q:joinChars(asciiStringFromUnsignedInt(8,toInt(identityFunction))),J:null,"S>":null,"L>":null,"Q>":null,c:joinChars(asciiStringFromSignedInt(1,toInt(identityFunction))),s:joinChars(asciiStringFromSignedInt(2,toInt(identityFunction))),l:joinChars(asciiStringFromSignedInt(4,toInt(identityFunction))),q:joinChars(asciiStringFromSignedInt(8,toInt(identityFunction))),j:null,"s>":null,"l>":null,"q>":null,n:null,N:null,v:null,V:null,U:joinChars((callback=toInt(identityFunction),function(data){return callback(data).map(function(item){try{return String.fromCodePoint(item)}catch(error){throw error instanceof RangeError&&self.$raise($$($nesting,"RangeError"),"value out of range"),error}})})),w:null,D:null,d:null,F:null,f:null,E:null,e:null,G:null,g:null,A:joinChars(identityFunction),a:joinChars(identityFunction),Z:null,B:null,b:null,H:null,h:null,u:null,M:null,m:null,P:null,p:null};function readNTimesFromBufferAndMerge(callback){return function(buffer,count){var chunkData,chunk=[];if(count===1/0)for(;0<buffer.length;)buffer=(chunkData=callback(buffer)).rest,chunk=chunk.concat(chunkData.chunk);else{buffer.length<count&&self.$raise($$($nesting,"ArgumentError"),"too few arguments");for(var i=0;i<count;i++)buffer=(chunkData=callback(buffer)).rest,chunk=chunk.concat(chunkData.chunk)}return{chunk:chunk,rest:buffer}}}function readItem(buffer){return{chunk:buffer.slice(0,1),rest:buffer=buffer.slice(1,buffer.length)}}function readNCharsFromTheFirstItemAndMergeWithFallback(fallback,callback){return function(buffer,count){var chunk=[],source=buffer[0];function infiniteReeder(){var chunkData=callback(source);source=chunkData.rest;var subChunk=chunkData.chunk;1===subChunk.length&&subChunk[0]===nil&&(subChunk=[]),chunk=chunk.concat(subChunk)}function finiteReeder(){var chunkData=callback(source);source=chunkData.rest;var subChunk=chunkData.chunk;0===subChunk.length&&(subChunk=[fallback]),1===subChunk.length&&subChunk[0]===nil&&(subChunk=[fallback]),chunk=chunk.concat(subChunk)}if(source===nil?source="":void 0===source?self.$raise($$($nesting,"ArgumentError"),"too few arguments"):source=$$($nesting,"Opal").$coerce_to(source,$$($nesting,"String"),"to_str"),buffer=buffer.slice(1,buffer.length),count===1/0)for(;0<source.length;)infiniteReeder();else for(var i=0;i<count;i++)finiteReeder();return{chunk:chunk,rest:buffer}}}var readChunk={C:readNTimesFromBufferAndMerge(readItem),S:readNTimesFromBufferAndMerge(readItem),L:readNTimesFromBufferAndMerge(readItem),Q:readNTimesFromBufferAndMerge(readItem),J:null,"S>":null,"L>":null,"Q>":null,c:readNTimesFromBufferAndMerge(readItem),s:readNTimesFromBufferAndMerge(readItem),l:readNTimesFromBufferAndMerge(readItem),q:readNTimesFromBufferAndMerge(readItem),j:null,"s>":null,"l>":null,"q>":null,n:null,N:null,v:null,V:null,U:readNTimesFromBufferAndMerge(readItem),w:null,D:null,d:null,F:null,f:null,E:null,e:null,G:null,g:null,A:readNCharsFromTheFirstItemAndMergeWithFallback(" ",readItem),a:readNCharsFromTheFirstItemAndMergeWithFallback("\0",readItem),Z:null,B:null,b:null,H:null,h:null,u:null,M:null,m:null,P:null,p:null},autocompletion={C:!1,S:!1,L:!1,Q:!1,J:null,"S>":null,"L>":null,"Q>":null,c:!1,s:!1,l:!1,q:!1,j:null,"s>":null,"l>":null,"q>":null,n:null,N:null,v:null,V:null,U:!1,w:null,D:null,d:null,F:null,f:null,E:null,e:null,G:null,g:null,A:!1,a:!1,Z:null,B:null,b:null,H:null,h:null,u:!1,M:null,m:null,P:null,p:null};return Opal.def(self,"$pack",$Array_pack$1=function(format){var self=this;format=$$($nesting,"Opal")["$coerce_to!"](format,$$($nesting,"String"),"to_str").$gsub(/\s/,"").$delete("\0");var output="",buffer=self.slice();return eachDirectiveAndCount(format,function(directive,count){var part=function(directive,count){var chunk,chunkReader=readChunk[directive];null==chunkReader&&self.$raise("Unsupported pack directive "+directive.$inspect()+" (no chunk reader defined)");var chunkData=chunkReader(buffer,count);chunk=chunkData.chunk,buffer=chunkData.rest;var handler=handlers[directive];return null==handler&&self.$raise("Unsupported pack directive "+directive.$inspect()+" (no handler defined)"),handler(chunk)}(directive,count);if(count!==1/0){var shouldAutocomplete=autocompletion[directive];null==shouldAutocomplete&&self.$raise("Unsupported pack directive "+directive.$inspect()+" (no autocompletion rule defined)"),shouldAutocomplete&&function(array,size){for(;array.length<size;)array.push(nil)}(part,count)}output=output.concat(part)}),output},$Array_pack$1.$$arity=1),nil&&"pack"}($nesting[0],0,$nesting)},Opal.modules["open-uri"]=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}var self=Opal.top,$nesting=[],nil=Opal.nil,$$$=Opal.const_get_qualified,$$=Opal.const_get_relative,$module=(Opal.breaker,Opal.slice,Opal.module),$truthy=Opal.truthy,$send=Opal.send,$hash2=Opal.hash2,$klass=Opal.klass;return Opal.add_stubs(["$require","$private","$respond_to?","$=~","$open_uri","$to_proc","$open_uri_original_open","$module_function","$open_loop","$rewind","$close_io","$close!","$closed?","$close","$request","$==","$build_response","$raise","$new","$<<","$pack","$data","$io","$status=","$-","$meta_add_field","$attr_reader","$+","$length","$===","$init","$extend","$instance_eval","$status","$base_uri","$base_uri=","$each","$metas","$meta_add_field2","$attr_accessor","$charset","$find_encoding","$set_encoding","$force_encoding","$string","$find","$downcase","$[]=","$join","$meta_setup_encoding","$[]","$utc","$at","$content_type_parse","$scheme","$open","$read"]),self.$require("stringio"),self.$require("corelib/array/pack"),function($base,$parent_nesting){var $Kernel_open$1,self=$module($base,"Kernel"),$nesting=[self].concat($parent_nesting);self.$private(),Opal.alias(self,"open_uri_original_open","open"),function(self,$parent_nesting){[self].concat($parent_nesting);Opal.alias(self,"open_uri_original_open","open")}(Opal.get_singleton_class(self),$nesting),Opal.def(self,"$open",$Kernel_open$1=function(name,$a){var rest,$b,$iter=$Kernel_open$1.$$p,block=$iter||nil;return $iter&&($Kernel_open$1.$$p=null),$iter&&($Kernel_open$1.$$p=null),rest=Opal.slice.call(arguments,1,arguments.length),$truthy($truthy($b=name["$respond_to?"]("to_str"))?/^[A-Za-z][A-Za-z0-9+\-\.]*:\/\//["$=~"](name):$b)?$send($$($nesting,"OpenURI"),"open_uri",[name].concat(Opal.to_a(rest)),block.$to_proc()):$send(this,"open_uri_original_open",[name].concat(Opal.to_a(rest)),block.$to_proc())},$Kernel_open$1.$$arity=-2),self.$module_function("open")}($nesting[0],$nesting),function($base,$parent_nesting){var $OpenURI_open_uri$2,$OpenURI_close_io$3,$OpenURI_open_loop$4,$OpenURI_build_response$5,$OpenURI_data$6,$OpenURI_request$7,self=$module($base,"OpenURI"),$nesting=[self].concat($parent_nesting);Opal.defs(self,"$open_uri",$OpenURI_open_uri$2=function(name,$a){var $iter=$OpenURI_open_uri$2.$$p,$yield=$iter||nil,self=this,io=nil;return $iter&&($OpenURI_open_uri$2.$$p=null),Opal.slice.call(arguments,1,arguments.length),(io=self.$open_loop(name,$hash2([],{}))).$rewind(),$yield!==nil?function(){try{return Opal.yield1($yield,io)}finally{self.$close_io(io)}}():io},$OpenURI_open_uri$2.$$arity=-2),Opal.defs(self,"$close_io",$OpenURI_close_io$3=function(io){return $truthy(io["$respond_to?"]("close!"))?io["$close!"]():$truthy(io["$closed?"]())?nil:io.$close()},$OpenURI_close_io$3.$$arity=1),Opal.defs(self,"$open_loop",$OpenURI_open_loop$4=function(uri,options){var $a,req,data,status_text,status=nil;return data=(req=this.$request(uri)).responseText,status=req.status,status_text=req.statusText&&req.statusText.errno?req.statusText.errno:req.statusText,$truthy($truthy($a=status["$=="](200))?$a:status["$=="](0)?data:status["$=="](0))?this.$build_response(req,status,status_text):this.$raise($$$($$($nesting,"OpenURI"),"HTTPError").$new(status+" "+status_text,""))},$OpenURI_open_loop$4.$$arity=2),Opal.defs(self,"$build_response",$OpenURI_build_response$5=function(req,status,status_text){var $writer,last_modified,buf=nil,io=nil;return(buf=$$($nesting,"Buffer").$new())["$<<"](this.$data(req).$pack("c*")),io=buf.$io(),$writer=[status+" "+status_text],$send(io,"status=",Opal.to_a($writer)),$rb_minus($writer.length,1),io.$meta_add_field("content-type",req.getResponseHeader("Content-Type")||""),last_modified=req.getResponseHeader("Last-Modified"),$truthy(last_modified)&&io.$meta_add_field("last-modified",last_modified),io},$OpenURI_build_response$5.$$arity=3),Opal.defs(self,"$data",$OpenURI_data$6=function(req){for(var binStr=req.responseText,byteArray=[],i=0,len=binStr.length;i<len;++i){var byteCode=255&binStr.charCodeAt(i);byteArray.push(byteCode)}return byteArray},$OpenURI_data$6.$$arity=1),Opal.defs(self,"$request",$OpenURI_request$7=function(uri){var self=this;try{var xhr=new XMLHttpRequest;return xhr.open("GET",uri,!1),xhr.overrideMimeType("text/plain; charset=x-user-defined"),xhr.send(),xhr}catch(error){self.$raise($$$($$($nesting,"OpenURI"),"HTTPError").$new(error.message,""))}},$OpenURI_request$7.$$arity=1),function($base,$super,$parent_nesting){var $HTTPError_initialize$8,self=$klass($base,$super,"HTTPError");[self].concat($parent_nesting);Opal.def(self,"$initialize",$HTTPError_initialize$8=function(message,io){var $iter=$HTTPError_initialize$8.$$p;return $iter&&($HTTPError_initialize$8.$$p=null),$send(this,Opal.find_super_dispatcher(this,"initialize",$HTTPError_initialize$8,!1),[message,io],null),this.io=io},$HTTPError_initialize$8.$$arity=2),self.$attr_reader("io")}($nesting[0],$$($nesting,"StandardError"),$nesting),function($base,$super,$parent_nesting){var $Buffer_initialize$9,$Buffer_$lt$lt$10,$Buffer_io$11,self=$klass($base,null,"Buffer"),$nesting=[self].concat($parent_nesting);self.$$prototype.io=self.$$prototype.size=nil,Opal.def(self,"$initialize",$Buffer_initialize$9=function(){return this.io=$$($nesting,"StringIO").$new(),this.size=0},$Buffer_initialize$9.$$arity=0),self.$attr_reader("size"),Opal.def(self,"$<<",$Buffer_$lt$lt$10=function(str){var lhs,rhs;return this.io["$<<"](str),this.size=(lhs=this.size,rhs=str.$length(),"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs))},$Buffer_$lt$lt$10.$$arity=1),Opal.def(self,"$io",$Buffer_io$11=function(){return $truthy($$($nesting,"Meta")["$==="](this.io))||$$($nesting,"Meta").$init(this.io),this.io},$Buffer_io$11.$$arity=0)}($nesting[0],0,$nesting),function($base,$parent_nesting){var $Meta_init$12,$Meta_meta_setup_encoding$15,$Meta_set_encoding$16,$Meta_find_encoding$17,$Meta_meta_add_field2$18,$Meta_meta_add_field$19,$Meta_last_modified$20,$Meta_content_type_parse$21,$Meta_charset$22,$Meta_content_type$23,self=$module($base,"Meta"),$nesting=[self].concat($parent_nesting);Opal.defs($$($nesting,"Meta"),"$init",$Meta_init$12=function(obj,src){var $$13,$$14,$writer=nil;return null==src&&(src=nil),obj.$extend($$($nesting,"Meta")),$send(obj,"instance_eval",[],(($$13=function(){var self=$$13.$$s||this;return self.base_uri=nil,self.meta=$hash2([],{}),self.metas=$hash2([],{})}).$$s=this,$$13.$$arity=0,$$13)),$truthy(src)?($writer=[src.$status()],$send(obj,"status=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)],$writer=[src.$base_uri()],$send(obj,"base_uri=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)],$send(src.$metas(),"each",[],(($$14=function(name,values){$$14.$$s;return null==name&&(name=nil),null==values&&(values=nil),obj.$meta_add_field2(name,values)}).$$s=this,$$14.$$arity=2,$$14))):nil},$Meta_init$12.$$arity=-2),self.$attr_accessor("status"),self.$attr_accessor("base_uri"),self.$attr_reader("meta"),self.$attr_reader("metas"),Opal.def(self,"$meta_setup_encoding",$Meta_meta_setup_encoding$15=function(){var charset,enc;return charset=this.$charset(),enc=this.$find_encoding(charset),this.$set_encoding(enc)},$Meta_meta_setup_encoding$15.$$arity=0),Opal.def(self,"$set_encoding",$Meta_set_encoding$16=function(enc){return $truthy(this["$respond_to?"]("force_encoding"))?this.$force_encoding(enc):$truthy(this["$respond_to?"]("string"))?this.$string().$force_encoding(enc):this.$set_encoding(enc)},$Meta_set_encoding$16.$$arity=1),Opal.def(self,"$find_encoding",$Meta_find_encoding$17=function(charset){var enc=nil;if(enc=nil,$truthy(charset))try{enc=$$($nesting,"Encoding").$find(charset)}catch($err){if(!Opal.rescue($err,[$$($nesting,"ArgumentError")]))throw $err;Opal.pop_exception()}return $truthy(enc)||(enc=$$$($$($nesting,"Encoding"),"ASCII_8BIT")),enc},$Meta_find_encoding$17.$$arity=1),Opal.def(self,"$meta_add_field2",$Meta_meta_add_field2$18=function(name,values){var $writer=nil;return null==this.metas&&(this.metas=nil),null==this.meta&&(this.meta=nil),$writer=[name=name.$downcase(),values],$send(this.metas,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)],$writer=[name,values.$join(", ")],$send(this.meta,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)],name["$=="]("content-type")?this.$meta_setup_encoding():nil},$Meta_meta_add_field2$18.$$arity=2),Opal.def(self,"$meta_add_field",$Meta_meta_add_field$19=function(name,value){return this.$meta_add_field2(name,[value])},$Meta_meta_add_field$19.$$arity=2),Opal.def(self,"$last_modified",$Meta_last_modified$20=function(){var vs=nil;return null==this.metas&&(this.metas=nil),$truthy(vs=this.metas["$[]"]("last-modified"))?$$($nesting,"Time").$at(Date.parse(vs.$join(", "))/1e3).$utc():nil},$Meta_last_modified$20.$$arity=0),Opal.def(self,"$content_type_parse",$Meta_content_type_parse$21=function(){return null==this.metas&&(this.metas=nil),this.metas["$[]"]("content-type").$join(", ")},$Meta_content_type_parse$21.$$arity=0),Opal.def(self,"$charset",$Meta_charset$22=function(){var $a,$b,$c,type;return null==this.base_uri&&(this.base_uri=nil),type=this.$content_type_parse(),$truthy($truthy($a=$truthy($b=$truthy($c=type)?/^text\//["$=~"](type):$c)?this.base_uri:$b)?/^http$/i["$=~"](this.base_uri.$scheme()):$a)?"iso-8859-1":nil},$Meta_charset$22.$$arity=0),Opal.def(self,"$content_type",$Meta_content_type$23=function(){var $a,type;return type=this.$content_type_parse(),$truthy($a=type)?$a:"application/octet-stream"},$Meta_content_type$23.$$arity=0)}($nesting[0],$nesting),function($base,$parent_nesting){var $OpenRead_open$24,$OpenRead_read$25,self=$module($base,"OpenRead"),$nesting=[self].concat($parent_nesting);Opal.def(self,"$open",$OpenRead_open$24=function($a){var rest,$iter=$OpenRead_open$24.$$p,block=$iter||nil,self=this;return $iter&&($OpenRead_open$24.$$p=null),$iter&&($OpenRead_open$24.$$p=null),rest=Opal.slice.call(arguments,0,arguments.length),$send($$($nesting,"OpenURI"),"open_uri",[self].concat(Opal.to_a(rest)),block.$to_proc())},$OpenRead_open$24.$$arity=-1),Opal.def(self,"$read",$OpenRead_read$25=function(options){var $$26;return null==options&&(options=$hash2([],{})),$send(this,"open",[options],(($$26=function(f){var str;$$26.$$s;return null==f&&(f=nil),str=f.$read(),$$($nesting,"Meta").$init(str,f),str}).$$s=this,$$26.$$arity=1,$$26))},$OpenRead_read$25.$$arity=-1)}($nesting[0],$nesting)}($nesting[0],$nesting)};
