Opal.modules.securerandom=function(Opal){Opal.top;var $nesting=[],nil=Opal.nil,$$$=Opal.$$$,$$=Opal.$$,$module=Opal.module;return Opal.add_stubs(["$extend","$warn","$rand","$gen_random","$_verify_count","$encode"]),function($base,$SecureRandom_gen_random$2){var crypto,gen_random_bytes,self=$module($base,"SecureRandom"),$nesting=[self].concat($SecureRandom_gen_random$2);return self.$extend($$$($$($nesting,"Random"),"Formatter")),gen_random_bytes=Opal.global.crypto&&Opal.global.crypto.getRandomValues||Opal.global.msCrypto&&Opal.global.msCrypto.getRandomValues?(crypto=Opal.global.crypto||Opal.global.msCrypto,function(storage){storage=new Uint8Array(storage);return crypto.getRandomValues(storage),storage}):Opal.global.crypto&&Opal.global.crypto.randomBytes?function(count){return Opal.global.crypto.randomBytes(count)}:(self.$warn("Can't get a Crypto.getRandomValues interface or Crypto.randomBytes.The random values generated with SecureRandom won't be cryptographically secure"),function(count){for(var storage=new Uint8Array(count),i=0;i<count;i++)storage[i]=self.$rand(255)^Math.floor(256*Math.random()),storage[i]^=+new Date>>self.$rand(255)&255;return storage}),Opal.defs(self,"$bytes",$SecureRandom_gen_random$2=function(bytes){return null==bytes&&(bytes=nil),this.$gen_random(bytes)},$SecureRandom_gen_random$2.$$arity=-1),Opal.defs(self,"$gen_random",$SecureRandom_gen_random$2=function(count){var out=nil;null==count&&(count=nil),count=$$($nesting,"Random").$_verify_count(count),out="";for(var bytes=gen_random_bytes(count),i=0;i<count;i++)out+=String.fromCharCode(bytes[i]);return out.$encode("ASCII-8BIT")},$SecureRandom_gen_random$2.$$arity=-1),nil&&"gen_random"}($nesting[0],$nesting)};
