Opal.modules.set=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}function $rb_lt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<rhs:lhs["$<"](rhs)}function $rb_le(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<=rhs:lhs["$<="](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.const_get_qualified,Opal.const_get_relative),$klass=(Opal.breaker,Opal.slice,Opal.klass),$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$module=Opal.module;return Opal.add_stubs(["$include","$new","$nil?","$===","$raise","$each","$add","$merge","$class","$respond_to?","$subtract","$dup","$join","$to_a","$equal?","$instance_of?","$==","$instance_variable_get","$is_a?","$size","$all?","$include?","$[]=","$-","$enum_for","$[]","$<<","$replace","$delete","$select","$each_key","$to_proc","$empty?","$eql?","$instance_eval","$clear","$<","$<=","$keys"]),function($base,$super,$parent_nesting){var $Set_$$$1,$Set_initialize$2,$Set_dup$4,$Set_$minus$5,$Set_inspect$6,$Set_$eq_eq$7,$Set_add$9,$Set_classify$10,$Set_collect$excl$13,$Set_delete$15,$Set_delete$ques$16,$Set_delete_if$17,$Set_add$ques$20,$Set_each$21,$Set_empty$ques$22,$Set_eql$ques$23,$Set_clear$25,$Set_include$ques$26,$Set_merge$27,$Set_replace$29,$Set_size$30,$Set_subtract$31,$Set_$$33,$Set_superset$ques$34,$Set_proper_superset$ques$36,$Set_subset$ques$38,$Set_proper_subset$ques$40,$Set_to_a$42,self=$klass($base,null,"Set"),$nesting=[self].concat($parent_nesting);self.$$prototype.hash=nil,self.$include($$($nesting,"Enumerable")),Opal.defs(self,"$[]",$Set_$$$1=function($a){var ary;return ary=Opal.slice.call(arguments,0,arguments.length),this.$new(ary)},$Set_$$$1.$$arity=-1),Opal.def(self,"$initialize",$Set_initialize$2=function(enum$){var $$3,$iter=$Set_initialize$2.$$p,block=$iter||nil;return $iter&&($Set_initialize$2.$$p=null),$iter&&($Set_initialize$2.$$p=null),null==enum$&&(enum$=nil),this.hash=$hash2([],{}),$truthy(enum$["$nil?"]())?nil:($truthy($$($nesting,"Enumerable")["$==="](enum$))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),$truthy(block)?$send(enum$,"each",[],(($$3=function(item){var self=$$3.$$s||this;return null==item&&(item=nil),self.$add(Opal.yield1(block,item))}).$$s=this,$$3.$$arity=1,$$3)):this.$merge(enum$))},$Set_initialize$2.$$arity=-1),Opal.def(self,"$dup",$Set_dup$4=function(){return this.$class().$new().$merge(this)},$Set_dup$4.$$arity=0),Opal.def(self,"$-",$Set_$minus$5=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$subtract(enum$)},$Set_$minus$5.$$arity=1),Opal.alias(self,"difference","-"),Opal.def(self,"$inspect",$Set_inspect$6=function(){return"#<Set: {"+this.$to_a().$join(",")+"}>"},$Set_inspect$6.$$arity=0),Opal.def(self,"$==",$Set_$eq_eq$7=function(other){var $a,$$8;return!!$truthy(this["$equal?"](other))||($truthy(other["$instance_of?"](this.$class()))?this.hash["$=="](other.$instance_variable_get("@hash")):!!$truthy($truthy($a=other["$is_a?"]($$($nesting,"Set")))?this.$size()["$=="](other.$size()):$a)&&$send(other,"all?",[],(($$8=function(o){var self=$$8.$$s||this;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash["$include?"](o)}).$$s=this,$$8.$$arity=1,$$8)))},$Set_$eq_eq$7.$$arity=1),Opal.def(self,"$add",$Set_add$9=function(o){var $writer;return $writer=[o,!0],$send(this.hash,"[]=",Opal.to_a($writer)),$rb_minus($writer.length,1),this},$Set_add$9.$$arity=1),Opal.alias(self,"<<","add"),Opal.def(self,"$classify",$Set_classify$10=function(){var $$11,$$12,$iter=$Set_classify$10.$$p,block=$iter||nil,result=nil;return $iter&&($Set_classify$10.$$p=null),$iter&&($Set_classify$10.$$p=null),block===nil?this.$enum_for("classify"):(result=$send($$($nesting,"Hash"),"new",[],(($$11=function(h,k){var $writer,self=$$11.$$s||this;return null==h&&(h=nil),null==k&&(k=nil),$writer=[k,self.$class().$new()],$send(h,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]}).$$s=this,$$11.$$arity=2,$$11)),$send(this,"each",[],(($$12=function(item){$$12.$$s;return null==item&&(item=nil),result["$[]"](Opal.yield1(block,item)).$add(item)}).$$s=this,$$12.$$arity=1,$$12)),result)},$Set_classify$10.$$arity=0),Opal.def(self,"$collect!",$Set_collect$excl$13=function(){var $$14,$iter=$Set_collect$excl$13.$$p,block=$iter||nil,result=nil;return $iter&&($Set_collect$excl$13.$$p=null),$iter&&($Set_collect$excl$13.$$p=null),block===nil?this.$enum_for("collect!"):(result=this.$class().$new(),$send(this,"each",[],(($$14=function(item){$$14.$$s;return null==item&&(item=nil),result["$<<"](Opal.yield1(block,item))}).$$s=this,$$14.$$arity=1,$$14)),this.$replace(result))},$Set_collect$excl$13.$$arity=0),Opal.alias(self,"map!","collect!"),Opal.def(self,"$delete",$Set_delete$15=function(o){return this.hash.$delete(o),this},$Set_delete$15.$$arity=1),Opal.def(self,"$delete?",$Set_delete$ques$16=function(o){return $truthy(this["$include?"](o))?(this.$delete(o),this):nil},$Set_delete$ques$16.$$arity=1),Opal.def(self,"$delete_if",$Set_delete_if$17=function(){var $$18,$$19,$iter=$Set_delete_if$17.$$p,$yield=$iter||nil;return $iter&&($Set_delete_if$17.$$p=null),$yield===nil?this.$enum_for("delete_if"):($send($send(this,"select",[],(($$18=function(o){$$18.$$s;return null==o&&(o=nil),Opal.yield1($yield,o)}).$$s=this,$$18.$$arity=1,$$18)),"each",[],(($$19=function(o){var self=$$19.$$s||this;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}).$$s=this,$$19.$$arity=1,$$19)),this)},$Set_delete_if$17.$$arity=0),Opal.def(self,"$add?",$Set_add$ques$20=function(o){return $truthy(this["$include?"](o))?nil:this.$add(o)},$Set_add$ques$20.$$arity=1),Opal.def(self,"$each",$Set_each$21=function(){var $iter=$Set_each$21.$$p,block=$iter||nil;return $iter&&($Set_each$21.$$p=null),$iter&&($Set_each$21.$$p=null),block===nil?this.$enum_for("each"):($send(this.hash,"each_key",[],block.$to_proc()),this)},$Set_each$21.$$arity=0),Opal.def(self,"$empty?",$Set_empty$ques$22=function(){return this.hash["$empty?"]()},$Set_empty$ques$22.$$arity=0),Opal.def(self,"$eql?",$Set_eql$ques$23=function(other){var $$24;return this.hash["$eql?"]($send(other,"instance_eval",[],(($$24=function(){var self=$$24.$$s||this;return null==self.hash&&(self.hash=nil),self.hash}).$$s=this,$$24.$$arity=0,$$24)))},$Set_eql$ques$23.$$arity=1),Opal.def(self,"$clear",$Set_clear$25=function(){return this.hash.$clear(),this},$Set_clear$25.$$arity=0),Opal.def(self,"$include?",$Set_include$ques$26=function(o){return this.hash["$include?"](o)},$Set_include$ques$26.$$arity=1),Opal.alias(self,"member?","include?"),Opal.def(self,"$merge",$Set_merge$27=function(enum$){var $$28;return $send(enum$,"each",[],(($$28=function(item){var self=$$28.$$s||this;return null==item&&(item=nil),self.$add(item)}).$$s=this,$$28.$$arity=1,$$28)),this},$Set_merge$27.$$arity=1),Opal.def(self,"$replace",$Set_replace$29=function(enum$){return this.$clear(),this.$merge(enum$),this},$Set_replace$29.$$arity=1),Opal.def(self,"$size",$Set_size$30=function(){return this.hash.$size()},$Set_size$30.$$arity=0),Opal.alias(self,"length","size"),Opal.def(self,"$subtract",$Set_subtract$31=function(enum$){var $$32;return $send(enum$,"each",[],(($$32=function(item){var self=$$32.$$s||this;return null==item&&(item=nil),self.$delete(item)}).$$s=this,$$32.$$arity=1,$$32)),this},$Set_subtract$31.$$arity=1),Opal.def(self,"$|",$Set_$$33=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$merge(enum$)},$Set_$$33.$$arity=1),Opal.def(self,"$superset?",$Set_superset$ques$34=function(set){var $$35;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(this.$size(),set.$size()))&&$send(set,"all?",[],(($$35=function(o){var self=$$35.$$s||this;return null==o&&(o=nil),self["$include?"](o)}).$$s=this,$$35.$$arity=1,$$35))},$Set_superset$ques$34.$$arity=1),Opal.alias(self,">=","superset?"),Opal.def(self,"$proper_superset?",$Set_proper_superset$ques$36=function(set){var $$37;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(this.$size(),set.$size()))&&$send(set,"all?",[],(($$37=function(o){var self=$$37.$$s||this;return null==o&&(o=nil),self["$include?"](o)}).$$s=this,$$37.$$arity=1,$$37))},$Set_proper_superset$ques$36.$$arity=1),Opal.alias(self,">","proper_superset?"),Opal.def(self,"$subset?",$Set_subset$ques$38=function(set){var $$39;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(set.$size(),this.$size()))&&$send(this,"all?",[],(($$39=function(o){$$39.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$39.$$arity=1,$$39))},$Set_subset$ques$38.$$arity=1),Opal.alias(self,"<=","subset?"),Opal.def(self,"$proper_subset?",$Set_proper_subset$ques$40=function(set){var $$41;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(set.$size(),this.$size()))&&$send(this,"all?",[],(($$41=function(o){$$41.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$41.$$arity=1,$$41))},$Set_proper_subset$ques$40.$$arity=1),Opal.alias(self,"<","proper_subset?"),Opal.alias(self,"+","|"),Opal.alias(self,"union","|"),Opal.def(self,"$to_a",$Set_to_a$42=function(){return this.hash.$keys()},$Set_to_a$42.$$arity=0)}($nesting[0],0,$nesting),function($base,$parent_nesting){var $Enumerable_to_set$43,self=$module($base,"Enumerable"),$nesting=[self].concat($parent_nesting);Opal.def(self,"$to_set",$Enumerable_to_set$43=function($a,$b){var $post_args,klass,args,$iter=$Enumerable_to_set$43.$$p,block=$iter||nil,self=this;return $iter&&($Enumerable_to_set$43.$$p=null),$iter&&($Enumerable_to_set$43.$$p=null),0<($post_args=Opal.slice.call(arguments,0,arguments.length)).length&&(klass=$post_args[0],$post_args.splice(0,1)),null==klass&&(klass=$$($nesting,"Set")),args=$post_args,$send(klass,"new",[self].concat(Opal.to_a(args)),block.$to_proc())},$Enumerable_to_set$43.$$arity=-1)}($nesting[0],$nesting)};
