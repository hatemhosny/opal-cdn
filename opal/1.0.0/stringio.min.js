Opal.modules.stringio=function(Opal){function $rb_gt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?rhs<lhs:lhs["$>"](rhs)}function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$$=Opal.const_get_qualified,$$=Opal.const_get_relative,$klass=(Opal.breaker,Opal.slice,Opal.klass),$truthy=Opal.truthy,$gvars=Opal.gvars;return Opal.add_stubs(["$include","$new","$call","$close","$attr_accessor","$length","$include?","$!","$check_readable","$==","$===","$>=","$raise","$>","$+","$-","$seek","$enum_for","$eof?","$ord","$[]","$to_str","$chomp","$check_writable","$String","$write","$closed_write?","$closed_read?"]),function($base,$super,$parent_nesting){var $StringIO_open$1,$StringIO_initialize$2,$StringIO_eof$ques$3,$StringIO_seek$4,$StringIO_tell$5,$StringIO_rewind$6,$StringIO_each_byte$7,$StringIO_each_char$8,$StringIO_each$9,$StringIO_write$10,$StringIO_read$11,$StringIO_close$12,$StringIO_close_read$13,$StringIO_close_write$14,$StringIO_closed$ques$15,$StringIO_closed_read$ques$16,$StringIO_closed_write$ques$17,$StringIO_check_writable$18,$StringIO_check_readable$19,self=$klass($base,$super,"StringIO"),$nesting=[self].concat($parent_nesting);return self.$$prototype.position=self.$$prototype.string=self.$$prototype.closed=nil,self.$include($$$($$($nesting,"IO"),"Readable")),self.$include($$$($$($nesting,"IO"),"Writable")),Opal.defs(self,"$open",$StringIO_open$1=function(string,mode){var res,$iter=$StringIO_open$1.$$p,block=$iter||nil,io=nil;return $iter&&($StringIO_open$1.$$p=null),$iter&&($StringIO_open$1.$$p=null),null==string&&(string=""),null==mode&&(mode=nil),io=this.$new(string,mode),res=block.$call(io),io.$close(),res},$StringIO_open$1.$$arity=-1),self.$attr_accessor("string"),Opal.def(self,"$initialize",$StringIO_initialize$2=function(string,mode){var $a;return null==string&&(string=""),null==mode&&(mode="rw"),this.string=string,this.position=string.$length(),$truthy($truthy($a=mode["$include?"]("r"))?mode["$include?"]("w")["$!"]():$a)?this.closed="write":$truthy($truthy($a=mode["$include?"]("w"))?mode["$include?"]("r")["$!"]():$a)?this.closed="read":nil},$StringIO_initialize$2.$$arity=-1),Opal.def(self,"$eof?",$StringIO_eof$ques$3=function(){return this.$check_readable(),this.position["$=="](this.string.$length())},$StringIO_eof$ques$3.$$arity=0),Opal.alias(self,"eof","eof?"),Opal.def(self,"$seek",$StringIO_seek$4=function(pos,whence){var $case,lhs,rhs;return null==whence&&(whence=$$$($$($nesting,"IO"),"SEEK_SET")),$case=whence,$$$($$($nesting,"IO"),"SEEK_SET")["$==="]($case)?($truthy((rhs=0,"number"==typeof(lhs=pos)&&"number"==typeof rhs?rhs<=lhs:lhs["$>="](rhs)))||this.$raise($$$($$($nesting,"Errno"),"EINVAL")),this.position=pos):$$$($$($nesting,"IO"),"SEEK_CUR")["$==="]($case)?$truthy($rb_gt($rb_plus(this.position,pos),this.string.$length()))?this.position=this.string.$length():this.position=$rb_plus(this.position,pos):$$$($$($nesting,"IO"),"SEEK_END")["$==="]($case)&&($truthy($rb_gt(pos,this.string.$length()))?this.position=0:this.position=$rb_minus(this.position,pos)),0},$StringIO_seek$4.$$arity=-2),Opal.def(self,"$tell",$StringIO_tell$5=function(){return this.position},$StringIO_tell$5.$$arity=0),Opal.alias(self,"pos","tell"),Opal.alias(self,"pos=","seek"),Opal.def(self,"$rewind",$StringIO_rewind$6=function(){return this.$seek(0)},$StringIO_rewind$6.$$arity=0),Opal.def(self,"$each_byte",$StringIO_each_byte$7=function(){var $iter=$StringIO_each_byte$7.$$p,block=$iter||nil,i=nil;if($iter&&($StringIO_each_byte$7.$$p=null),$iter&&($StringIO_each_byte$7.$$p=null),!$truthy(block))return this.$enum_for("each_byte");for(this.$check_readable(),i=this.position;!$truthy(this["$eof?"]());)block.$call(this.string["$[]"](i).$ord()),i=$rb_plus(i,1);return this},$StringIO_each_byte$7.$$arity=0),Opal.def(self,"$each_char",$StringIO_each_char$8=function(){var $iter=$StringIO_each_char$8.$$p,block=$iter||nil,i=nil;if($iter&&($StringIO_each_char$8.$$p=null),$iter&&($StringIO_each_char$8.$$p=null),!$truthy(block))return this.$enum_for("each_char");for(this.$check_readable(),i=this.position;!$truthy(this["$eof?"]());)block.$call(this.string["$[]"](i)),i=$rb_plus(i,1);return this},$StringIO_each_char$8.$$arity=0),Opal.def(self,"$each",$StringIO_each$9=function(separator){var $iter=$StringIO_each$9.$$p,$yield=$iter||nil,chomp_lines=nil;if(null==$gvars["/"]&&($gvars["/"]=nil),$iter&&($StringIO_each$9.$$p=null),null==separator&&(separator=$gvars["/"]),$yield===nil)return this.$enum_for("each_line");this.$check_readable(),chomp_lines=!1,separator=$truthy($$$("::","Hash")["$==="](separator))?$truthy(chomp_lines=separator["$[]"]("chomp"))?/\r?\n/:$gvars["/"]:$truthy(separator)?separator.$to_str():void 0;var str=this.string,stringLength=str.length;if(this.position<stringLength&&(str=str.substr(this.position)),separator)for(var chomped=str.$chomp(),trailing=str.length!==chomped.length,splitted=chomped.split(separator),i=0,len=splitted.length;i<len;i++){var line=chomp_lines?splitted[i]:i<len-1||trailing?splitted[i]+separator:splitted[i];Opal.yield1($yield,line)}else if(void 0===separator)Opal.yield1($yield,str);else for(var m,re=/(.+(?:\n\n|$))\n*/g;m=re.exec(str);)Opal.yield1($yield,m[1]);return this.position=stringLength,this},$StringIO_each$9.$$arity=-1),Opal.alias(self,"each_line","each"),Opal.def(self,"$write",$StringIO_write$10=function(string){var before=nil,after=nil;return this.$check_writable(),string=this.$String(string),this.string.$length()["$=="](this.position)?this.string=$rb_plus(this.string,string):(before=this.string["$[]"](Opal.Range.$new(0,$rb_minus(this.position,1),!1)),after=this.string["$[]"](Opal.Range.$new($rb_plus(this.position,string.$length()),-1,!1)),this.string=$rb_plus($rb_plus(before,string),after)),this.position=$rb_plus(this.position,string.$length())},$StringIO_write$10.$$arity=1),Opal.def(self,"$read",$StringIO_read$11=function(length,outbuf){var self=this,string=nil,str=nil;return null==length&&(length=nil),null==outbuf&&(outbuf=nil),self.$check_readable(),$truthy(self["$eof?"]())?nil:($truthy(length)?(str=self.string["$[]"](self.position,length),self.position=$rb_plus(self.position,length)):(str=self.string["$[]"](Opal.Range.$new(self.position,-1,!1)),self.position=self.string.$length()),string=str,$truthy(outbuf)?outbuf.$write(string):string)},$StringIO_read$11.$$arity=-1),Opal.def(self,"$close",$StringIO_close$12=function(){return this.closed="both"},$StringIO_close$12.$$arity=0),Opal.def(self,"$close_read",$StringIO_close_read$13=function(){return this.closed["$=="]("write")?this.closed="both":this.closed="read"},$StringIO_close_read$13.$$arity=0),Opal.def(self,"$close_write",$StringIO_close_write$14=function(){return this.closed["$=="]("read")?this.closed="both":this.closed="write"},$StringIO_close_write$14.$$arity=0),Opal.def(self,"$closed?",$StringIO_closed$ques$15=function(){return this.closed["$=="]("both")},$StringIO_closed$ques$15.$$arity=0),Opal.def(self,"$closed_read?",$StringIO_closed_read$ques$16=function(){var $a;return $truthy($a=this.closed["$=="]("read"))?$a:this.closed["$=="]("both")},$StringIO_closed_read$ques$16.$$arity=0),Opal.def(self,"$closed_write?",$StringIO_closed_write$ques$17=function(){var $a;return $truthy($a=this.closed["$=="]("write"))?$a:this.closed["$=="]("both")},$StringIO_closed_write$ques$17.$$arity=0),Opal.def(self,"$check_writable",$StringIO_check_writable$18=function(){return $truthy(this["$closed_write?"]())?this.$raise($$($nesting,"IOError"),"not opened for writing"):nil},$StringIO_check_writable$18.$$arity=0),Opal.def(self,"$check_readable",$StringIO_check_readable$19=function(){return $truthy(this["$closed_read?"]())?this.$raise($$($nesting,"IOError"),"not opened for reading"):nil},$StringIO_check_readable$19.$$arity=0),nil&&"check_readable"}($nesting[0],$$($nesting,"IO"),$nesting)};
