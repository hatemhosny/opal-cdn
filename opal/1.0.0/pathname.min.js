Opal.modules["corelib/comparable"]=function(Opal){function $rb_gt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?rhs<lhs:lhs["$>"](rhs)}function $rb_lt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<rhs:lhs["$<"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.const_get_qualified,Opal.const_get_relative),$module=(Opal.breaker,Opal.slice,Opal.module),$truthy=Opal.truthy;return Opal.add_stubs(["$>","$<","$===","$raise","$class","$equal?","$<=>"]),function($base,$parent_nesting){var $Comparable_$eq_eq$1,$Comparable_$gt$2,$Comparable_$gt_eq$3,$Comparable_$lt$4,$Comparable_$lt_eq$5,$Comparable_between$ques$6,$Comparable_clamp$7,self=$module($base,"Comparable"),$nesting=[self].concat($parent_nesting),$case=nil;function normalize(what){return Opal.is_a(what,Opal.Integer)?what:$rb_gt(what,0)?1:$rb_lt(what,0)?-1:0}function fail_comparison(lhs,rhs){var class_name;$case=rhs,class_name=nil["$==="]($case)||(!0)["$==="]($case)||(!1)["$==="]($case)||$$($nesting,"Integer")["$==="]($case)||$$($nesting,"Float")["$==="]($case)?rhs.$inspect():rhs.$$class,self.$raise($$($nesting,"ArgumentError"),"comparison of "+lhs.$class()+" with "+class_name+" failed")}Opal.def(self,"$==",$Comparable_$eq_eq$1=function(other){var cmp;return!!$truthy(this["$equal?"](other))||this["$<=>"]!=Opal.Kernel["$<=>"]&&(this.$$comparable?(delete this.$$comparable,!1):!!$truthy(cmp=this["$<=>"](other))&&0==normalize(cmp))},$Comparable_$eq_eq$1.$$arity=1),Opal.def(self,"$>",$Comparable_$gt$2=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||fail_comparison(this,other),0<normalize(cmp)},$Comparable_$gt$2.$$arity=1),Opal.def(self,"$>=",$Comparable_$gt_eq$3=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||fail_comparison(this,other),0<=normalize(cmp)},$Comparable_$gt_eq$3.$$arity=1),Opal.def(self,"$<",$Comparable_$lt$4=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||fail_comparison(this,other),normalize(cmp)<0},$Comparable_$lt$4.$$arity=1),Opal.def(self,"$<=",$Comparable_$lt_eq$5=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||fail_comparison(this,other),normalize(cmp)<=0},$Comparable_$lt_eq$5.$$arity=1),Opal.def(self,"$between?",$Comparable_between$ques$6=function(min,max){return!$rb_lt(this,min)&&!$rb_gt(this,max)},$Comparable_between$ques$6.$$arity=2),Opal.def(self,"$clamp",$Comparable_clamp$7=function(min,max){var cmp;return cmp=min["$<=>"](max),$truthy(cmp)||fail_comparison(min,max),$truthy(0<normalize(cmp))&&this.$raise($$($nesting,"ArgumentError"),"min argument must be smaller than max argument"),$truthy(normalize(this["$<=>"](min))<0)?min:$truthy(0<normalize(this["$<=>"](max)))?max:this},$Comparable_clamp$7.$$arity=2)}($nesting[0],$nesting)},Opal.modules.pathname=function(Opal){function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}var self=Opal.top,$nesting=[],nil=Opal.nil,$$$=Opal.const_get_qualified,$$=Opal.const_get_relative,$klass=(Opal.breaker,Opal.slice,Opal.klass),$truthy=Opal.truthy,$send=Opal.send,$module=Opal.module;return Opal.add_stubs(["$require","$include","$quote","$===","$to_s","$path","$respond_to?","$to_path","$is_a?","$nil?","$raise","$class","$==","$attr_reader","$!","$relative?","$chop_basename","$basename","$=~","$new","$source","$[]","$rindex","$sub","$absolute?","$expand_path","$plus","$unshift","$length","$!=","$empty?","$first","$shift","$+","$join","$dirname","$pop","$reverse_each","$directory?","$extname","$<=>","$nonzero?","$proc","$casecmp","$cleanpath","$inspect","$include?","$fill","$map","$entries"]),self.$require("corelib/comparable"),function($base,$super,$parent_nesting){var $Pathname_initialize$1,$Pathname_$eq_eq$2,$Pathname_absolute$ques$3,$Pathname_relative$ques$4,$Pathname_chop_basename$5,$Pathname_root$ques$6,$Pathname_parent$7,$Pathname_sub$8,$Pathname_cleanpath$9,$Pathname_to_path$10,$Pathname_hash$11,$Pathname_expand_path$12,$Pathname_$plus$13,$Pathname_plus$14,$Pathname_join$15,$Pathname_split$17,$Pathname_dirname$18,$Pathname_basename$19,$Pathname_directory$ques$20,$Pathname_extname$21,$Pathname_$lt_eq_gt$22,$Pathname$23,$Pathname$24,$Pathname_relative_path_from$25,$Pathname_entries$26,self=$klass($base,null,"Pathname"),$nesting=[self].concat($parent_nesting);self.$$prototype.path=nil,self.$include($$($nesting,"Comparable")),Opal.const_set($nesting[0],"SEPARATOR_PAT",new RegExp($$($nesting,"Regexp").$quote($$$($$($nesting,"File"),"SEPARATOR")))),Opal.def(self,"$initialize",$Pathname_initialize$1=function(path){return $truthy($$($nesting,"Pathname")["$==="](path))?this.path=path.$path().$to_s():$truthy(path["$respond_to?"]("to_path"))?this.path=path.$to_path():$truthy(path["$is_a?"]($$($nesting,"String")))?this.path=path:$truthy(path["$nil?"]())?this.$raise($$($nesting,"TypeError"),"no implicit conversion of nil into String"):this.$raise($$($nesting,"TypeError"),"no implicit conversion of "+path.$class()+" into String"),this.path["$=="]("\0")?this.$raise($$($nesting,"ArgumentError")):nil},$Pathname_initialize$1.$$arity=1),self.$attr_reader("path"),Opal.def(self,"$==",$Pathname_$eq_eq$2=function(other){return other.$path()["$=="](this.path)},$Pathname_$eq_eq$2.$$arity=1),Opal.def(self,"$absolute?",$Pathname_absolute$ques$3=function(){return this["$relative?"]()["$!"]()},$Pathname_absolute$ques$3.$$arity=0),Opal.def(self,"$relative?",$Pathname_relative$ques$4=function(){var $b,$c,path=nil,r=nil;for(path=this.path;$truthy(r=this.$chop_basename(path));)$c=r,path=null==($b=Opal.to_ary($c))[0]?nil:$b[0];return path["$=="]("")},$Pathname_relative$ques$4.$$arity=0),Opal.def(self,"$chop_basename",$Pathname_chop_basename$5=function(path){var base;return base=$$($nesting,"File").$basename(path),$truthy($$($nesting,"Regexp").$new("^"+$$$($$($nesting,"Pathname"),"SEPARATOR_PAT").$source()+"?$")["$=~"](base))?nil:[path["$[]"](0,path.$rindex(base)),base]},$Pathname_chop_basename$5.$$arity=1),Opal.def(self,"$root?",$Pathname_root$ques$6=function(){return this.path["$=="]("/")},$Pathname_root$ques$6.$$arity=0),Opal.def(self,"$parent",$Pathname_parent$7=function(){var self=this,new_path=nil;return(new_path=self.path.$sub(/\/([^\/]+\/?$)/,""))["$=="]("")&&(new_path=$truthy(self["$absolute?"]())?"/":"."),$$($nesting,"Pathname").$new(new_path)},$Pathname_parent$7.$$arity=0),Opal.def(self,"$sub",$Pathname_sub$8=function($a){var args;return args=Opal.slice.call(arguments,0,arguments.length),$$($nesting,"Pathname").$new($send(this.path,"sub",Opal.to_a(args)))},$Pathname_sub$8.$$arity=-1),Opal.def(self,"$cleanpath",$Pathname_cleanpath$9=function(){return Opal.normalize(this.path)},$Pathname_cleanpath$9.$$arity=0),Opal.def(self,"$to_path",$Pathname_to_path$10=function(){return this.path},$Pathname_to_path$10.$$arity=0),Opal.def(self,"$hash",$Pathname_hash$11=function(){return this.path},$Pathname_hash$11.$$arity=0),Opal.def(self,"$expand_path",$Pathname_expand_path$12=function(){return $$($nesting,"Pathname").$new($$($nesting,"File").$expand_path(this.path))},$Pathname_expand_path$12.$$arity=0),Opal.def(self,"$+",$Pathname_$plus$13=function(other){return $truthy($$($nesting,"Pathname")["$==="](other))||(other=$$($nesting,"Pathname").$new(other)),$$($nesting,"Pathname").$new(this.$plus(this.path,other.$to_s()))},$Pathname_$plus$13.$$arity=1),Opal.def(self,"$plus",$Pathname_plus$14=function(path1,path2){var $a,$b,$c,prefix2=nil,index_list2=nil,basename_list2=nil,r2=nil,basename2=nil,prefix1=nil,r1=nil,basename1=nil,suffix2=nil;for(prefix2=path2,index_list2=[],basename_list2=[];$truthy(r2=this.$chop_basename(prefix2));)$c=r2,prefix2=null==($b=Opal.to_ary($c))[0]?nil:$b[0],basename2=null==$b[1]?nil:$b[1],index_list2.$unshift(prefix2.$length()),basename_list2.$unshift(basename2);if($truthy(prefix2["$!="]("")))return path2;for(prefix1=path1;$truthy(!0);){for(;$truthy($truthy($c=basename_list2["$empty?"]()["$!"]())?basename_list2.$first()["$=="]("."):$c);)index_list2.$shift(),basename_list2.$shift();if(!$truthy(r1=this.$chop_basename(prefix1)))break;if($c=r1,prefix1=null==($b=Opal.to_ary($c))[0]?nil:$b[0],!(basename1=null==$b[1]?nil:$b[1])["$=="](".")){if($truthy($truthy($b=$truthy($c=basename1["$=="](".."))?$c:basename_list2["$empty?"]())?$b:basename_list2.$first()["$!="](".."))){prefix1=$rb_plus(prefix1,basename1);break}index_list2.$shift(),basename_list2.$shift()}}if(r1=this.$chop_basename(prefix1),$truthy($truthy($a=r1["$!"]())?new RegExp($$($nesting,"SEPARATOR_PAT"))["$=~"]($$($nesting,"File").$basename(prefix1)):$a))for(;$truthy($truthy($b=basename_list2["$empty?"]()["$!"]())?basename_list2.$first()["$=="](".."):$b);)index_list2.$shift(),basename_list2.$shift();return $truthy(basename_list2["$empty?"]()["$!"]())?(suffix2=path2["$[]"](Opal.Range.$new(index_list2.$first(),-1,!1)),$truthy(r1)?$$($nesting,"File").$join(prefix1,suffix2):$rb_plus(prefix1,suffix2)):$truthy(r1)?prefix1:$$($nesting,"File").$dirname(prefix1)},$Pathname_plus$14.$$arity=2),Opal.def(self,"$join",$Pathname_join$15=function($a){try{var $post_args,args,$$16,result=nil;return $post_args=Opal.slice.call(arguments,0,arguments.length),$truthy((args=$post_args)["$empty?"]())?this:(result=args.$pop(),$truthy($$($nesting,"Pathname")["$==="](result))||(result=$$($nesting,"Pathname").$new(result)),$truthy(result["$absolute?"]())?result:($send(args,"reverse_each",[],(($$16=function(arg){$$16.$$s;if(null==arg&&(arg=nil),$truthy($$($nesting,"Pathname")["$==="](arg))||(arg=$$($nesting,"Pathname").$new(arg)),result=$rb_plus(arg,result),!$truthy(result["$absolute?"]()))return nil;Opal.ret(result)}).$$s=this,$$16.$$arity=1,$$16)),$rb_plus(this,result)))}catch($returner){if($returner===Opal.returner)return $returner.$v;throw $returner}},$Pathname_join$15.$$arity=-1),Opal.def(self,"$split",$Pathname_split$17=function(){return[this.$dirname(),this.$basename()]},$Pathname_split$17.$$arity=0),Opal.def(self,"$dirname",$Pathname_dirname$18=function(){return $$($nesting,"Pathname").$new($$($nesting,"File").$dirname(this.path))},$Pathname_dirname$18.$$arity=0),Opal.def(self,"$basename",$Pathname_basename$19=function(){return $$($nesting,"Pathname").$new($$($nesting,"File").$basename(this.path))},$Pathname_basename$19.$$arity=0),Opal.def(self,"$directory?",$Pathname_directory$ques$20=function(){return $$($nesting,"File")["$directory?"](this.path)},$Pathname_directory$ques$20.$$arity=0),Opal.def(self,"$extname",$Pathname_extname$21=function(){return $$($nesting,"File").$extname(this.path)},$Pathname_extname$21.$$arity=0),Opal.def(self,"$<=>",$Pathname_$lt_eq_gt$22=function(other){return this.$path()["$<=>"](other.$path())},$Pathname_$lt_eq_gt$22.$$arity=1),Opal.alias(self,"eql?","=="),Opal.alias(self,"===","=="),Opal.alias(self,"to_str","to_path"),Opal.alias(self,"to_s","to_path"),Opal.const_set($nesting[0],"SAME_PATHS",$truthy($$$($$($nesting,"File"),"FNM_SYSCASE")["$nonzero?"]())?$send(self,"proc",[],(($Pathname$23=function(a,b){return $Pathname$23.$$s,null==a&&(a=nil),null==b&&(b=nil),a.$casecmp(b)["$=="](0)}).$$s=self,$Pathname$23.$$arity=2,$Pathname$23)):$send(self,"proc",[],(($Pathname$24=function(a,b){return $Pathname$24.$$s,null==a&&(a=nil),null==b&&(b=nil),a["$=="](b)}).$$s=self,$Pathname$24.$$arity=2,$Pathname$24))),Opal.def(self,"$relative_path_from",$Pathname_relative_path_from$25=function(base_directory){var $b,$c,dest_directory,dest_prefix=nil,dest_names=nil,r=nil,basename=nil,base_prefix=nil,base_names=nil,relpath_names=nil;for(dest_directory=this.$cleanpath().$to_s(),base_directory=base_directory.$cleanpath().$to_s(),dest_prefix=dest_directory,dest_names=[];$truthy(r=this.$chop_basename(dest_prefix));)$c=r,dest_prefix=null==($b=Opal.to_ary($c))[0]?nil:$b[0],basename=null==$b[1]?nil:$b[1],$truthy(basename["$!="]("."))&&dest_names.$unshift(basename);for(base_prefix=base_directory,base_names=[];$truthy(r=this.$chop_basename(base_prefix));)$c=r,base_prefix=null==($b=Opal.to_ary($c))[0]?nil:$b[0],basename=null==$b[1]?nil:$b[1],$truthy(basename["$!="]("."))&&base_names.$unshift(basename);for($truthy($$($nesting,"SAME_PATHS")["$[]"](dest_prefix,base_prefix))||this.$raise($$($nesting,"ArgumentError"),"different prefix: "+dest_prefix.$inspect()+" and "+base_directory.$inspect());$truthy($truthy($b=$truthy($c=dest_names["$empty?"]()["$!"]())?base_names["$empty?"]()["$!"]():$c)?$$($nesting,"SAME_PATHS")["$[]"](dest_names.$first(),base_names.$first()):$b);)dest_names.$shift(),base_names.$shift();return $truthy(base_names["$include?"](".."))&&this.$raise($$($nesting,"ArgumentError"),"base_directory has ..: "+base_directory.$inspect()),base_names.$fill(".."),relpath_names=$rb_plus(base_names,dest_names),$truthy(relpath_names["$empty?"]())?$$($nesting,"Pathname").$new("."):$$($nesting,"Pathname").$new($send($$($nesting,"File"),"join",Opal.to_a(relpath_names)))},$Pathname_relative_path_from$25.$$arity=1),Opal.def(self,"$entries",$Pathname_entries$26=function(){var $$27;return $send($$($nesting,"Dir").$entries(this.path),"map",[],(($$27=function(f){var self=$$27.$$s||this;return null==f&&(f=nil),self.$class().$new(f)}).$$s=this,$$27.$$arity=1,$$27))},$Pathname_entries$26.$$arity=0)}($nesting[0],0,$nesting),function($base,$parent_nesting){var $Kernel_Pathname$28,self=$module($base,"Kernel"),$nesting=[self].concat($parent_nesting);Opal.def(self,"$Pathname",$Kernel_Pathname$28=function(path){return $$($nesting,"Pathname").$new(path)},$Kernel_Pathname$28.$$arity=1)}($nesting[0],$nesting)};
