/* Generated by Opal 1.0.0 */
Opal.modules["delegate"] = function(Opal) {
  var $DelegateClass$5, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$__setobj__', '$__getobj__', '$respond_to?', '$__send__', '$to_proc']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Delegator');

    var $nesting = [self].concat($parent_nesting), $Delegator_initialize$1, $Delegator_method_missing$2;

    
    
    Opal.def(self, '$initialize', $Delegator_initialize$1 = function $$initialize(obj) {
      var self = this;

      return self.$__setobj__(obj)
    }, $Delegator_initialize$1.$$arity = 1);
    return (Opal.def(self, '$method_missing', $Delegator_method_missing$2 = function $$method_missing(m, $a) {
      var $iter = $Delegator_method_missing$2.$$p, block = $iter || nil, $post_args, args, self = this, target = nil;

      if ($iter) $Delegator_method_missing$2.$$p = null;
      
      
      if ($iter) $Delegator_method_missing$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      target = self.$__getobj__();
      if ($truthy(target['$respond_to?'](m))) {
        return $send(target, '__send__', [m].concat(Opal.to_a(args)), block.$to_proc())
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'method_missing', $Delegator_method_missing$2, false), [m].concat(Opal.to_a(args)), block.$to_proc())
      };
    }, $Delegator_method_missing$2.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], $$($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SimpleDelegator');

    var $nesting = [self].concat($parent_nesting), $SimpleDelegator___getobj__$3, $SimpleDelegator___setobj__$4;

    self.$$prototype.delegate_sd_obj = nil;
    
    
    Opal.def(self, '$__getobj__', $SimpleDelegator___getobj__$3 = function $$__getobj__() {
      var self = this;

      return self.delegate_sd_obj
    }, $SimpleDelegator___getobj__$3.$$arity = 0);
    return (Opal.def(self, '$__setobj__', $SimpleDelegator___setobj__$4 = function $$__setobj__(obj) {
      var self = this;

      return (self.delegate_sd_obj = obj)
    }, $SimpleDelegator___setobj__$4.$$arity = 1), nil) && '__setobj__';
  })($nesting[0], $$($nesting, 'Delegator'), $nesting);
  return (Opal.def(self, '$DelegateClass', $DelegateClass$5 = function $$DelegateClass(superklass) {
    var self = this;

    return $$($nesting, 'SimpleDelegator')
  }, $DelegateClass$5.$$arity = 1), nil) && 'DelegateClass';
};
