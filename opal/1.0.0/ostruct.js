/* Generated by Opal 1.0.0 */
Opal.modules["ostruct"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$new_ostruct_member', '$[]=', '$-', '$[]', '$to_sym', '$>', '$length', '$raise', '$new', '$end_with?', '$!=', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$attr_reader', '$__send__', '$singleton_class', '$delete', '$respond_to?', '$define_singleton_method', '$__id__', '$class', '$any?', '$+', '$join', '$map', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'OpenStruct');

    var $nesting = [self].concat($parent_nesting), $OpenStruct_initialize$1, $OpenStruct_$$$3, $OpenStruct_$$$eq$4, $OpenStruct_method_missing$5, $OpenStruct_each_pair$6, $OpenStruct_$eq_eq$8, $OpenStruct_$eq_eq_eq$9, $OpenStruct_eql$ques$10, $OpenStruct_to_h$11, $OpenStruct_to_n$12, $OpenStruct_hash$13, $OpenStruct_delete_field$14, $OpenStruct_new_ostruct_member$15, $OpenStruct_inspect$18;

    self.$$prototype.table = nil;
    
    
    Opal.def(self, '$initialize', $OpenStruct_initialize$1 = function $$initialize(hash) {
      var $$2, self = this;

      
      
      if (hash == null) {
        hash = nil;
      };
      self.table = $hash2([], {});
      if ($truthy(hash)) {
        return $send(hash, 'each_pair', [], ($$2 = function(key, value){var self = $$2.$$s || this, $writer = nil;
          if (self.table == null) self.table = nil;

        
          
          if (key == null) {
            key = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          $writer = [self.$new_ostruct_member(key), value];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$2.$$s = self, $$2.$$arity = 2, $$2))
      } else {
        return nil
      };
    }, $OpenStruct_initialize$1.$$arity = -1);
    
    Opal.def(self, '$[]', $OpenStruct_$$$3 = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym())
    }, $OpenStruct_$$$3.$$arity = 1);
    
    Opal.def(self, '$[]=', $OpenStruct_$$$eq$4 = function(name, value) {
      var self = this, $writer = nil;

      
      $writer = [self.$new_ostruct_member(name), value];
      $send(self.table, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, $OpenStruct_$$$eq$4.$$arity = 2);
    
    Opal.def(self, '$method_missing', $OpenStruct_method_missing$5 = function $$method_missing(name, $a) {
      var $post_args, args, self = this, $writer = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy($rb_gt(args.$length(), 2))) {
        self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `" + (name) + "' for #<OpenStruct>", name))};
      if ($truthy(name['$end_with?']("="))) {
        
        if ($truthy(args.$length()['$!='](1))) {
          self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1)")};
        
        $writer = [self.$new_ostruct_member(name['$[]']($range(0, -2, false))), args['$[]'](0)];
        $send(self.table, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      } else {
        return self.table['$[]'](name.$to_sym())
      };
    }, $OpenStruct_method_missing$5.$$arity = -2);
    
    Opal.def(self, '$each_pair', $OpenStruct_each_pair$6 = function $$each_pair() {
      var $$7, $iter = $OpenStruct_each_pair$6.$$p, $yield = $iter || nil, self = this;

      if ($iter) $OpenStruct_each_pair$6.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return self.$enum_for("each_pair")
      };
      return $send(self.table, 'each_pair', [], ($$7 = function(pair){var self = $$7.$$s || this;

      
        
        if (pair == null) {
          pair = nil;
        };
        return Opal.yield1($yield, pair);;}, $$7.$$s = self, $$7.$$arity = 1, $$7));
    }, $OpenStruct_each_pair$6.$$arity = 0);
    
    Opal.def(self, '$==', $OpenStruct_$eq_eq$8 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?']($$($nesting, 'OpenStruct')))) {
      } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    }, $OpenStruct_$eq_eq$8.$$arity = 1);
    
    Opal.def(self, '$===', $OpenStruct_$eq_eq_eq$9 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?']($$($nesting, 'OpenStruct')))) {
      } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    }, $OpenStruct_$eq_eq_eq$9.$$arity = 1);
    
    Opal.def(self, '$eql?', $OpenStruct_eql$ques$10 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?']($$($nesting, 'OpenStruct')))) {
      } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    }, $OpenStruct_eql$ques$10.$$arity = 1);
    
    Opal.def(self, '$to_h', $OpenStruct_to_h$11 = function $$to_h() {
      var self = this;

      return self.table.$dup()
    }, $OpenStruct_to_h$11.$$arity = 0);
    
    Opal.def(self, '$to_n', $OpenStruct_to_n$12 = function $$to_n() {
      var self = this;

      return self.table.$to_n()
    }, $OpenStruct_to_n$12.$$arity = 0);
    
    Opal.def(self, '$hash', $OpenStruct_hash$13 = function $$hash() {
      var self = this;

      return self.table.$hash()
    }, $OpenStruct_hash$13.$$arity = 0);
    self.$attr_reader("table");
    
    Opal.def(self, '$delete_field', $OpenStruct_delete_field$14 = function $$delete_field(name) {
      var self = this, sym = nil;

      
      sym = name.$to_sym();
      
      try {
        self.$singleton_class().$__send__("remove_method", sym, "" + (sym) + "=")
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'NameError')])) {
          try {
            nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self.table.$delete(sym);
    }, $OpenStruct_delete_field$14.$$arity = 1);
    
    Opal.def(self, '$new_ostruct_member', $OpenStruct_new_ostruct_member$15 = function $$new_ostruct_member(name) {
      var $$16, $$17, self = this;

      
      name = name.$to_sym();
      if ($truthy(self['$respond_to?'](name))) {
      } else {
        
        $send(self, 'define_singleton_method', [name], ($$16 = function(){var self = $$16.$$s || this;
          if (self.table == null) self.table = nil;

        return self.table['$[]'](name)}, $$16.$$s = self, $$16.$$arity = 0, $$16));
        $send(self, 'define_singleton_method', ["" + (name) + "="], ($$17 = function(x){var self = $$17.$$s || this, $writer = nil;
          if (self.table == null) self.table = nil;

        
          
          if (x == null) {
            x = nil;
          };
          $writer = [name, x];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$17.$$s = self, $$17.$$arity = 1, $$17));
      };
      return name;
    }, $OpenStruct_new_ostruct_member$15.$$arity = 1);
    var ostruct_ids;;
    
    Opal.def(self, '$inspect', $OpenStruct_inspect$18 = function $$inspect() {
      var $$19, self = this, result = nil;

      
      
      var top = (ostruct_ids === undefined),
          ostruct_id = self.$__id__();
    ;
      
      return (function() { try {
      
      result = "" + "#<" + (self.$class());
      
        if (top) {
          ostruct_ids = {};
        }
        if (ostruct_ids.hasOwnProperty(ostruct_id)) {
          return result + ' ...>';
        }
        ostruct_ids[ostruct_id] = true;
      ;
      if ($truthy(self.table['$any?']())) {
        result = $rb_plus(result, " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], ($$19 = function(name, value){var self = $$19.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return "" + (name) + "=" + (value.$inspect());}, $$19.$$s = self, $$19.$$arity = 2, $$19)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
      } finally {
        
        if (top) {
          ostruct_ids = undefined;
        }
      
      }; })();;
    }, $OpenStruct_inspect$18.$$arity = 0);
    return Opal.alias(self, "to_s", "inspect");
  })($nesting[0], null, $nesting)
};
