Opal.modules.promise=function(Opal){function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.const_get_qualified,Opal.const_get_relative),$klass=(Opal.breaker,Opal.slice,Opal.klass),$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send;return Opal.add_stubs(["$resolve","$new","$reject","$attr_reader","$===","$value","$key?","$keys","$!=","$==","$<<","$>>","$exception?","$[]","$resolved?","$rejected?","$!","$error","$include?","$action","$realized?","$raise","$^","$call","$resolve!","$exception!","$any?","$each","$reject!","$there_can_be_only_one!","$then","$to_proc","$fail","$always","$trace","$class","$object_id","$+","$inspect","$act?","$nil?","$prev","$push","$concat","$it","$proc","$reverse","$pop","$<=","$length","$shift","$-","$wait","$map","$reduce","$try","$tap","$all?","$find"]),function($base,$super,$parent_nesting){var $Promise_value$1,$Promise_error$2,$Promise_when$3,$Promise_initialize$4,$Promise_value$5,$Promise_act$ques$6,$Promise_action$7,$Promise_exception$ques$8,$Promise_realized$ques$9,$Promise_resolved$ques$10,$Promise_rejected$ques$11,$Promise_$$12,$Promise_$lt$lt$13,$Promise_$gt$gt$14,$Promise_resolve$15,$Promise_resolve$excl$16,$Promise_reject$18,$Promise_reject$excl$19,$Promise_exception$excl$21,$Promise_then$22,$Promise_then$excl$23,$Promise_fail$24,$Promise_fail$excl$25,$Promise_always$26,$Promise_always$excl$27,$Promise_trace$28,$Promise_trace$excl$29,$Promise_there_can_be_only_one$excl$30,$Promise_inspect$31,self=$klass($base,null,"Promise"),$nesting=[self].concat($parent_nesting);return self.$$prototype.value=self.$$prototype.action=self.$$prototype.exception=self.$$prototype.realized=self.$$prototype.next=self.$$prototype.delayed=self.$$prototype.error=self.$$prototype.prev=nil,Opal.defs(self,"$value",$Promise_value$1=function(value){return this.$new().$resolve(value)},$Promise_value$1.$$arity=1),Opal.defs(self,"$error",$Promise_error$2=function(value){return this.$new().$reject(value)},$Promise_error$2.$$arity=1),Opal.defs(self,"$when",$Promise_when$3=function($a){var promises;return promises=Opal.slice.call(arguments,0,arguments.length),$$($nesting,"When").$new(promises)},$Promise_when$3.$$arity=-1),self.$attr_reader("error","prev","next"),Opal.def(self,"$initialize",$Promise_initialize$4=function(action){return null==action&&(action=$hash2([],{})),this.action=action,this.realized=!1,this.exception=!1,this.value=nil,this.error=nil,this.delayed=!1,this.prev=nil,this.next=[]},$Promise_initialize$4.$$arity=-1),Opal.def(self,"$value",$Promise_value$5=function(){return $truthy($$($nesting,"Promise")["$==="](this.value))?this.value.$value():this.value},$Promise_value$5.$$arity=0),Opal.def(self,"$act?",$Promise_act$ques$6=function(){var $a;return $truthy($a=this.action["$key?"]("success"))?$a:this.action["$key?"]("always")},$Promise_act$ques$6.$$arity=0),Opal.def(self,"$action",$Promise_action$7=function(){return this.action.$keys()},$Promise_action$7.$$arity=0),Opal.def(self,"$exception?",$Promise_exception$ques$8=function(){return this.exception},$Promise_exception$ques$8.$$arity=0),Opal.def(self,"$realized?",$Promise_realized$ques$9=function(){return this.realized["$!="](!1)},$Promise_realized$ques$9.$$arity=0),Opal.def(self,"$resolved?",$Promise_resolved$ques$10=function(){return this.realized["$=="]("resolve")},$Promise_resolved$ques$10.$$arity=0),Opal.def(self,"$rejected?",$Promise_rejected$ques$11=function(){return this.realized["$=="]("reject")},$Promise_rejected$ques$11.$$arity=0),Opal.def(self,"$^",$Promise_$$12=function(promise){return promise["$<<"](this),this["$>>"](promise),promise},$Promise_$$12.$$arity=1),Opal.def(self,"$<<",$Promise_$lt$lt$13=function(promise){return this.prev=promise,this},$Promise_$lt$lt$13.$$arity=1),Opal.def(self,"$>>",$Promise_$gt$gt$14=function(promise){var $a,self=this;return self.next["$<<"](promise),$truthy(self["$exception?"]())?promise.$reject(self.delayed["$[]"](0)):$truthy(self["$resolved?"]())?promise.$resolve($truthy(self.delayed)?self.delayed["$[]"](0):self.$value()):$truthy(self["$rejected?"]())&&($truthy($truthy($a=self.action["$key?"]("failure")["$!"]())?$a:$$($nesting,"Promise")["$==="]($truthy(self.delayed)?self.delayed["$[]"](0):self.error))?promise.$reject($truthy(self.delayed)?self.delayed["$[]"](0):self.$error()):$truthy(promise.$action()["$include?"]("always"))&&promise.$reject($truthy(self.delayed)?self.delayed["$[]"](0):self.$error())),self},$Promise_$gt$gt$14.$$arity=1),Opal.def(self,"$resolve",$Promise_resolve$15=function(value){var $a,self=this,block=nil,e=nil;if(null==value&&(value=nil),$truthy(self["$realized?"]())&&self.$raise($$($nesting,"ArgumentError"),"the promise has already been realized"),$truthy($$($nesting,"Promise")["$==="](value)))return value["$<<"](self.prev)["$^"](self);try{block=$truthy($a=self.action["$[]"]("success"))?$a:self.action["$[]"]("always"),$truthy(block)&&(value=block.$call(value)),self["$resolve!"](value)}catch($err){if(!Opal.rescue($err,[$$($nesting,"Exception")]))throw $err;e=$err;try{self["$exception!"](e)}finally{Opal.pop_exception()}}return self},$Promise_resolve$15.$$arity=-1),Opal.def(self,"$resolve!",$Promise_resolve$excl$16=function(value){var $$17;return this.realized="resolve",this.value=value,$truthy(this.next["$any?"]())?$send(this.next,"each",[],(($$17=function(p){$$17.$$s;return null==p&&(p=nil),p.$resolve(value)}).$$s=this,$$17.$$arity=1,$$17)):this.delayed=[value]},$Promise_resolve$excl$16.$$arity=1),Opal.def(self,"$reject",$Promise_reject$18=function(value){var $a,self=this,block=nil,e=nil;if(null==value&&(value=nil),$truthy(self["$realized?"]())&&self.$raise($$($nesting,"ArgumentError"),"the promise has already been realized"),$truthy($$($nesting,"Promise")["$==="](value)))return value["$<<"](self.prev)["$^"](self);try{block=$truthy($a=self.action["$[]"]("failure"))?$a:self.action["$[]"]("always"),$truthy(block)&&(value=block.$call(value)),$truthy(self.action["$key?"]("always"))?self["$resolve!"](value):self["$reject!"](value)}catch($err){if(!Opal.rescue($err,[$$($nesting,"Exception")]))throw $err;e=$err;try{self["$exception!"](e)}finally{Opal.pop_exception()}}return self},$Promise_reject$18.$$arity=-1),Opal.def(self,"$reject!",$Promise_reject$excl$19=function(value){var $$20;return this.realized="reject",this.error=value,$truthy(this.next["$any?"]())?$send(this.next,"each",[],(($$20=function(p){$$20.$$s;return null==p&&(p=nil),p.$reject(value)}).$$s=this,$$20.$$arity=1,$$20)):this.delayed=[value]},$Promise_reject$excl$19.$$arity=1),Opal.def(self,"$exception!",$Promise_exception$excl$21=function(error){return this.exception=!0,this["$reject!"](error)},$Promise_exception$excl$21.$$arity=1),Opal.def(self,"$then",$Promise_then$22=function(){var $iter=$Promise_then$22.$$p,block=$iter||nil;return $iter&&($Promise_then$22.$$p=null),$iter&&($Promise_then$22.$$p=null),this["$^"]($$($nesting,"Promise").$new($hash2(["success"],{success:block})))},$Promise_then$22.$$arity=0),Opal.def(self,"$then!",$Promise_then$excl$23=function(){var $iter=$Promise_then$excl$23.$$p,block=$iter||nil;return $iter&&($Promise_then$excl$23.$$p=null),$iter&&($Promise_then$excl$23.$$p=null),this["$there_can_be_only_one!"](),$send(this,"then",[],block.$to_proc())},$Promise_then$excl$23.$$arity=0),Opal.alias(self,"do","then"),Opal.alias(self,"do!","then!"),Opal.def(self,"$fail",$Promise_fail$24=function(){var $iter=$Promise_fail$24.$$p,block=$iter||nil;return $iter&&($Promise_fail$24.$$p=null),$iter&&($Promise_fail$24.$$p=null),this["$^"]($$($nesting,"Promise").$new($hash2(["failure"],{failure:block})))},$Promise_fail$24.$$arity=0),Opal.def(self,"$fail!",$Promise_fail$excl$25=function(){var $iter=$Promise_fail$excl$25.$$p,block=$iter||nil;return $iter&&($Promise_fail$excl$25.$$p=null),$iter&&($Promise_fail$excl$25.$$p=null),this["$there_can_be_only_one!"](),$send(this,"fail",[],block.$to_proc())},$Promise_fail$excl$25.$$arity=0),Opal.alias(self,"rescue","fail"),Opal.alias(self,"catch","fail"),Opal.alias(self,"rescue!","fail!"),Opal.alias(self,"catch!","fail!"),Opal.def(self,"$always",$Promise_always$26=function(){var $iter=$Promise_always$26.$$p,block=$iter||nil;return $iter&&($Promise_always$26.$$p=null),$iter&&($Promise_always$26.$$p=null),this["$^"]($$($nesting,"Promise").$new($hash2(["always"],{always:block})))},$Promise_always$26.$$arity=0),Opal.def(self,"$always!",$Promise_always$excl$27=function(){var $iter=$Promise_always$excl$27.$$p,block=$iter||nil;return $iter&&($Promise_always$excl$27.$$p=null),$iter&&($Promise_always$excl$27.$$p=null),this["$there_can_be_only_one!"](),$send(this,"always",[],block.$to_proc())},$Promise_always$excl$27.$$arity=0),Opal.alias(self,"finally","always"),Opal.alias(self,"ensure","always"),Opal.alias(self,"finally!","always!"),Opal.alias(self,"ensure!","always!"),Opal.def(self,"$trace",$Promise_trace$28=function(depth){var $iter=$Promise_trace$28.$$p,block=$iter||nil;return $iter&&($Promise_trace$28.$$p=null),$iter&&($Promise_trace$28.$$p=null),null==depth&&(depth=nil),this["$^"]($$($nesting,"Trace").$new(depth,block))},$Promise_trace$28.$$arity=-1),Opal.def(self,"$trace!",$Promise_trace$excl$29=function($a){var args,$iter=$Promise_trace$excl$29.$$p,block=$iter||nil;return $iter&&($Promise_trace$excl$29.$$p=null),$iter&&($Promise_trace$excl$29.$$p=null),args=Opal.slice.call(arguments,0,arguments.length),this["$there_can_be_only_one!"](),$send(this,"trace",Opal.to_a(args),block.$to_proc())},$Promise_trace$excl$29.$$arity=-1),Opal.def(self,"$there_can_be_only_one!",$Promise_there_can_be_only_one$excl$30=function(){return $truthy(this.next["$any?"]())?this.$raise($$($nesting,"ArgumentError"),"a promise has already been chained"):nil},$Promise_there_can_be_only_one$excl$30.$$arity=0),Opal.def(self,"$inspect",$Promise_inspect$31=function(){var $a,self=this,result=nil;return result="#<"+self.$class()+"("+self.$object_id()+")",$truthy(self.next["$any?"]())&&(result=$rb_plus(result," >> "+self.next.$inspect())),result=$rb_plus(result,$truthy(self["$realized?"]())?": "+($truthy($a=self.value)?$a:self.error).$inspect()+">":">")},$Promise_inspect$31.$$arity=0),function($base,$super,$parent_nesting){var $Trace_it$32,$Trace_initialize$33,self=$klass($base,$super,"Trace"),$nesting=[self].concat($parent_nesting);Opal.defs(self,"$it",$Trace_it$32=function(promise){var $a,prev,current=nil;return current=[],$truthy($truthy($a=promise["$act?"]())?$a:promise.$prev()["$nil?"]())&&current.$push(promise.$value()),prev=promise.$prev(),$truthy(prev)?current.$concat(this.$it(prev)):current},$Trace_it$32.$$arity=1),Opal.def(self,"$initialize",$Trace_initialize$33=function(depth,block){var $$34,$iter=$Trace_initialize$33.$$p;return $iter&&($Trace_initialize$33.$$p=null),this.depth=depth,$send(this,Opal.find_super_dispatcher(this,"initialize",$Trace_initialize$33,!1),[$hash2(["success"],{success:$send(this,"proc",[],($$34=function(){var $a,lhs,rhs,self=$$34.$$s||this,trace=nil;return(trace=$$($nesting,"Trace").$it(self).$reverse()).$pop(),$truthy($truthy($a=depth)?(lhs=depth,rhs=trace.$length(),"number"==typeof lhs&&"number"==typeof rhs?lhs<=rhs:lhs["$<="](rhs)):$a)&&trace.$shift(function(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}(trace.$length(),depth)),$send(block,"call",Opal.to_a(trace))},$$34.$$s=this,$$34.$$arity=0,$$34))})],null)},$Trace_initialize$33.$$arity=2)}($nesting[0],self,$nesting),function($base,$super,$parent_nesting){var $When_initialize$35,$When_each$37,$When_collect$39,$When_inject$41,$When_wait$43,$When_$gt$gt$45,$When_try$47,self=$klass($base,$super,"When"),$nesting=[self].concat($parent_nesting);return self.$$prototype.wait=nil,Opal.def(self,"$initialize",$When_initialize$35=function(promises){var $$36,$iter=$When_initialize$35.$$p;return $iter&&($When_initialize$35.$$p=null),null==promises&&(promises=[]),$send(this,Opal.find_super_dispatcher(this,"initialize",$When_initialize$35,!1),[],null),this.wait=[],$send(promises,"each",[],(($$36=function(promise){var self=$$36.$$s||this;return null==promise&&(promise=nil),self.$wait(promise)}).$$s=this,$$36.$$arity=1,$$36))},$When_initialize$35.$$arity=-1),Opal.def(self,"$each",$When_each$37=function(){var $$38,$iter=$When_each$37.$$p,block=$iter||nil;return $iter&&($When_each$37.$$p=null),$iter&&($When_each$37.$$p=null),$truthy(block)||this.$raise($$($nesting,"ArgumentError"),"no block given"),$send(this,"then",[],(($$38=function(values){$$38.$$s;return null==values&&(values=nil),$send(values,"each",[],block.$to_proc())}).$$s=this,$$38.$$arity=1,$$38))},$When_each$37.$$arity=0),Opal.def(self,"$collect",$When_collect$39=function(){var $$40,$iter=$When_collect$39.$$p,block=$iter||nil;return $iter&&($When_collect$39.$$p=null),$iter&&($When_collect$39.$$p=null),$truthy(block)||this.$raise($$($nesting,"ArgumentError"),"no block given"),$send(this,"then",[],(($$40=function(values){$$40.$$s;return null==values&&(values=nil),$$($nesting,"When").$new($send(values,"map",[],block.$to_proc()))}).$$s=this,$$40.$$arity=1,$$40))},$When_collect$39.$$arity=0),Opal.def(self,"$inject",$When_inject$41=function($a){var $post_args,args,$$42,$iter=$When_inject$41.$$p,block=$iter||nil;return $iter&&($When_inject$41.$$p=null),$iter&&($When_inject$41.$$p=null),$post_args=Opal.slice.call(arguments,0,arguments.length),args=$post_args,$send(this,"then",[],(($$42=function(values){$$42.$$s;return null==values&&(values=nil),$send(values,"reduce",Opal.to_a(args),block.$to_proc())}).$$s=this,$$42.$$arity=1,$$42))},$When_inject$41.$$arity=-1),Opal.alias(self,"map","collect"),Opal.alias(self,"reduce","inject"),Opal.def(self,"$wait",$When_wait$43=function(promise){var $$44;return $truthy($$($nesting,"Promise")["$==="](promise))||(promise=$$($nesting,"Promise").$value(promise)),$truthy(promise["$act?"]())&&(promise=promise.$then()),this.wait["$<<"](promise),$send(promise,"always",[],(($$44=function(){var self=$$44.$$s||this;return null==self.next&&(self.next=nil),$truthy(self.next["$any?"]())?self.$try():nil}).$$s=this,$$44.$$arity=0,$$44)),this},$When_wait$43.$$arity=1),Opal.alias(self,"and","wait"),Opal.def(self,"$>>",$When_$gt$gt$45=function($a){var $$46,$zuper_ii,$iter=$When_$gt$gt$45.$$p,$zuper=nil,$zuper_i=nil;for($iter&&($When_$gt$gt$45.$$p=null),$zuper_i=0,$zuper_ii=arguments.length,$zuper=new Array($zuper_ii);$zuper_i<$zuper_ii;$zuper_i++)$zuper[$zuper_i]=arguments[$zuper_i];return Opal.slice.call(arguments,0,arguments.length),$send($send(this,Opal.find_super_dispatcher(this,">>",$When_$gt$gt$45,!1),$zuper,$iter),"tap",[],(($$46=function(){return($$46.$$s||this).$try()}).$$s=this,$$46.$$arity=0,$$46))},$When_$gt$gt$45.$$arity=-1),Opal.def(self,"$try",$When_try$47=function(){var promise=nil;return $truthy($send(this.wait,"all?",[],"realized?".$to_proc()))?(promise=$send(this.wait,"find",[],"rejected?".$to_proc()),$truthy(promise)?this.$reject(promise.$error()):this.$resolve($send(this.wait,"map",[],"value".$to_proc()))):nil},$When_try$47.$$arity=0),nil&&"try"}($nesting[0],self,$nesting)}($nesting[0],0,$nesting)};
