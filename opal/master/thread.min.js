Opal.modules.thread=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}Opal.top;var $base,$super,$parent_nesting,$nesting=[],nil=Opal.nil,$$$=Opal.$$$,$$=Opal.$$,$klass=Opal.klass,$truthy=Opal.truthy,$send=Opal.send,$hash2=Opal.hash2,$alias=Opal.alias;return Opal.add_stubs(["$allocate","$core_initialize!","$current","$raise","$[]","$coerce_key_name","$[]=","$-","$key?","$keys","$private","$coerce_to!","$clear","$empty?","$size","$shift","$push","$each","$to_proc","$=~","$last_match","$to_i","$inspect","$attr_reader","$locked?","$lock","$unlock"]),$base=$nesting[0],$super=$$($nesting,"StandardError"),$parent_nesting=$nesting,[$klass($base,$super,"ThreadError")].concat($parent_nesting),function($Thread_coerce_key_name$13,$Thread_core_initialize$excl$12){var $nesting=[$Thread_coerce_key_name$13=$klass($Thread_coerce_key_name$13,null,"Thread")].concat($Thread_core_initialize$excl$12);$Thread_coerce_key_name$13.$$prototype.fiber_locals=$Thread_coerce_key_name$13.$$prototype.thread_locals=nil,Opal.defs($Thread_coerce_key_name$13,"$current",$Thread_core_initialize$excl$12=function(){return null==this.current&&(this.current=nil),$truthy(this.current)||(this.current=this.$allocate(),this.current["$core_initialize!"]()),this.current},$Thread_core_initialize$excl$12.$$arity=0),Opal.defs($Thread_coerce_key_name$13,"$list",$Thread_core_initialize$excl$12=function(){return[this.$current()]},$Thread_core_initialize$excl$12.$$arity=0),Opal.def($Thread_coerce_key_name$13,"$initialize",$Thread_core_initialize$excl$12=function($a){Opal.slice.call(arguments,0,arguments.length);return this.$raise($$($nesting,"NotImplementedError"),"Thread creation not available")},$Thread_core_initialize$excl$12.$$arity=-1),Opal.def($Thread_coerce_key_name$13,"$[]",$Thread_core_initialize$excl$12=function(key){return this.fiber_locals["$[]"](this.$coerce_key_name(key))},$Thread_core_initialize$excl$12.$$arity=1),Opal.def($Thread_coerce_key_name$13,"$[]=",$Thread_core_initialize$excl$12=function(key,value){var $writer=[this.$coerce_key_name(key),value];return $send(this.fiber_locals,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},$Thread_core_initialize$excl$12.$$arity=2),Opal.def($Thread_coerce_key_name$13,"$key?",$Thread_core_initialize$excl$12=function(key){return this.fiber_locals["$key?"](this.$coerce_key_name(key))},$Thread_core_initialize$excl$12.$$arity=1),Opal.def($Thread_coerce_key_name$13,"$keys",$Thread_core_initialize$excl$12=function(){return this.fiber_locals.$keys()},$Thread_core_initialize$excl$12.$$arity=0),Opal.def($Thread_coerce_key_name$13,"$thread_variable_get",$Thread_core_initialize$excl$12=function(key){return this.thread_locals["$[]"](this.$coerce_key_name(key))},$Thread_core_initialize$excl$12.$$arity=1),Opal.def($Thread_coerce_key_name$13,"$thread_variable_set",$Thread_core_initialize$excl$12=function(key,value){var $writer=[this.$coerce_key_name(key),value];return $send(this.thread_locals,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},$Thread_core_initialize$excl$12.$$arity=2),Opal.def($Thread_coerce_key_name$13,"$thread_variable?",$Thread_core_initialize$excl$12=function(key){return this.thread_locals["$key?"](this.$coerce_key_name(key))},$Thread_core_initialize$excl$12.$$arity=1),Opal.def($Thread_coerce_key_name$13,"$thread_variables",$Thread_core_initialize$excl$12=function(){return this.thread_locals.$keys()},$Thread_core_initialize$excl$12.$$arity=0),$Thread_coerce_key_name$13.$private(),Opal.def($Thread_coerce_key_name$13,"$core_initialize!",$Thread_core_initialize$excl$12=function(){return this.thread_locals=$hash2([],{}),this.fiber_locals=$hash2([],{})},$Thread_core_initialize$excl$12.$$arity=0),Opal.def($Thread_coerce_key_name$13,"$coerce_key_name",$Thread_coerce_key_name$13=function(key){return $$($nesting,"Opal")["$coerce_to!"](key,$$($nesting,"String"),"to_s")},$Thread_coerce_key_name$13.$$arity=1),function(self,$Queue_push$19){var $Queue_each$20,$nesting=[self=$klass(self,null,"Queue")].concat($Queue_push$19);self.$$prototype.storage=nil,Opal.def(self,"$initialize",$Queue_push$19=function(){return this.$clear()},$Queue_push$19.$$arity=0),Opal.def(self,"$clear",$Queue_push$19=function(){return this.storage=[]},$Queue_push$19.$$arity=0),Opal.def(self,"$empty?",$Queue_push$19=function(){return this.storage["$empty?"]()},$Queue_push$19.$$arity=0),Opal.def(self,"$size",$Queue_push$19=function(){return this.storage.$size()},$Queue_push$19.$$arity=0),$alias(self,"length","size"),Opal.def(self,"$pop",$Queue_push$19=function(non_block){return null==non_block&&(non_block=!1),$truthy(this["$empty?"]())&&($truthy(non_block)&&this.$raise($$($nesting,"ThreadError"),"Queue empty"),this.$raise($$($nesting,"ThreadError"),"Deadlock")),this.storage.$shift()},$Queue_push$19.$$arity=-1),$alias(self,"shift","pop"),$alias(self,"deq","pop"),Opal.def(self,"$push",$Queue_push$19=function(value){return this.storage.$push(value)},$Queue_push$19.$$arity=1),$alias(self,"<<","push"),$alias(self,"enq","push"),Opal.def(self,"$each",$Queue_each$20=function(){var $iter=$Queue_each$20.$$p,block=$iter||nil;return $iter&&($Queue_each$20.$$p=null),$iter&&($Queue_each$20.$$p=null),$send(this.storage,"each",[],block.$to_proc())},$Queue_each$20.$$arity=0)}($nesting[0],$nesting),function($base,$nesting){!function(self,$Location_inspect$23){var $nesting=[self=$klass(self,null,"Location")].concat($Location_inspect$23);self.$$prototype.label=self.$$prototype.str=nil,Opal.def(self,"$initialize",$Location_inspect$23=function(str){var self=this,$ret_or_1=nil;return(self.str=str)["$=~"](/^(.*?):(\d+):(\d+):in `(.*?)'$/),self.path=$$($nesting,"Regexp").$last_match(1),self.label=$$($nesting,"Regexp").$last_match(4),self.lineno=$$($nesting,"Regexp").$last_match(2).$to_i(),self.label["$=~"](/(\w+)$/),self.base_label=$truthy($ret_or_1=$$($nesting,"Regexp").$last_match(1))?$ret_or_1:self.label},$Location_inspect$23.$$arity=1),Opal.def(self,"$to_s",$Location_inspect$23=function(){return this.str},$Location_inspect$23.$$arity=0),Opal.def(self,"$inspect",$Location_inspect$23=function(){return this.str.$inspect()},$Location_inspect$23.$$arity=0),self.$attr_reader("base_label","label","lineno","path"),$alias(self,"absolute_path","path")}(($nesting=[$klass($base,null,"Backtrace")].concat($nesting))[0],$nesting)}($nesting[0],$nesting)}($nesting[0],$nesting),Opal.const_set($nesting[0],"Queue",$$$($$($nesting,"Thread"),"Queue")),function(self,$Mutex_unlock$29){var $Mutex_synchronize$30,self=$klass(self,null,"Mutex"),$nesting=[self].concat($Mutex_unlock$29);return self.$$prototype.locked=nil,Opal.def(self,"$initialize",$Mutex_unlock$29=function(){return this.locked=!1},$Mutex_unlock$29.$$arity=0),Opal.def(self,"$lock",$Mutex_unlock$29=function(){return $truthy(this.locked)&&this.$raise($$($nesting,"ThreadError"),"Deadlock"),this.locked=!0,this},$Mutex_unlock$29.$$arity=0),Opal.def(self,"$locked?",$Mutex_unlock$29=function(){return this.locked},$Mutex_unlock$29.$$arity=0),Opal.def(self,"$owned?",$Mutex_unlock$29=function(){return this.locked},$Mutex_unlock$29.$$arity=0),Opal.def(self,"$try_lock",$Mutex_unlock$29=function(){return!$truthy(this["$locked?"]())&&(this.$lock(),!0)},$Mutex_unlock$29.$$arity=0),Opal.def(self,"$unlock",$Mutex_unlock$29=function(){return $truthy(this.locked)||this.$raise($$($nesting,"ThreadError"),"Mutex not locked"),this.locked=!1,this},$Mutex_unlock$29.$$arity=0),Opal.def(self,"$synchronize",$Mutex_synchronize$30=function(){var $iter=$Mutex_synchronize$30.$$p,$yield=$iter||nil,self=this;return $iter&&($Mutex_synchronize$30.$$p=null),self.$lock(),function(){try{return Opal.yieldX($yield,[])}finally{self.$unlock()}}()},$Mutex_synchronize$30.$$arity=0),nil&&"synchronize"}($nesting[0],$nesting)};
