Opal.modules.set=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}function $rb_lt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<rhs:lhs["$<"](rhs)}function $rb_le(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<=rhs:lhs["$<="](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.$$$,Opal.$$),$klass=Opal.klass,$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$alias=Opal.alias,$module=Opal.module;return Opal.add_stubs(["$include","$new","$nil?","$===","$raise","$each","$add","$merge","$class","$respond_to?","$subtract","$dup","$join","$to_a","$equal?","$instance_of?","$==","$instance_variable_get","$is_a?","$size","$all?","$include?","$[]=","$-","$enum_for","$[]","$<<","$replace","$delete","$select","$reject","$delete_if","$to_proc","$keep_if","$each_key","$empty?","$eql?","$instance_eval","$clear","$<","$<=","$any?","$!","$intersect?","$keys"]),function($Set_to_a$51,$Set_disjoint$ques$50){var $Set_initialize$2,$Set_classify$10,$Set_collect$excl$13,$Set_delete_if$17,$Set_keep_if$20,$Set_reject$excl$23,$Set_select$excl$24,$Set_each$26,$nesting=[$Set_to_a$51=$klass($Set_to_a$51,null,"Set")].concat($Set_disjoint$ques$50);$Set_to_a$51.$$prototype.hash=nil,$Set_to_a$51.$include($$($nesting,"Enumerable")),Opal.defs($Set_to_a$51,"$[]",$Set_disjoint$ques$50=function($a){var $post_args=Opal.slice.call(arguments,0,arguments.length);return this.$new($post_args)},$Set_disjoint$ques$50.$$arity=-1),Opal.def($Set_to_a$51,"$initialize",$Set_initialize$2=function(enum$){var $$3,$iter=$Set_initialize$2.$$p,block=$iter||nil;return $iter&&($Set_initialize$2.$$p=null),$iter&&($Set_initialize$2.$$p=null),null==enum$&&(enum$=nil),this.hash=$hash2([],{}),$truthy(enum$["$nil?"]())?nil:($truthy($$($nesting,"Enumerable")["$==="](enum$))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),$truthy(block)?$send(enum$,"each",[],(($$3=function(item){var self=null==$$3.$$s?this:$$3.$$s;return null==item&&(item=nil),self.$add(Opal.yield1(block,item))}).$$s=this,$$3.$$arity=1,$$3)):this.$merge(enum$))},$Set_initialize$2.$$arity=-1),Opal.def($Set_to_a$51,"$dup",$Set_disjoint$ques$50=function(){return this.$class().$new().$merge(this)},$Set_disjoint$ques$50.$$arity=0),Opal.def($Set_to_a$51,"$-",$Set_disjoint$ques$50=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$subtract(enum$)},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,"difference","-"),Opal.def($Set_to_a$51,"$inspect",$Set_disjoint$ques$50=function(){return"#<Set: {"+this.$to_a().$join(",")+"}>"},$Set_disjoint$ques$50.$$arity=0),Opal.def($Set_to_a$51,"$==",$Set_disjoint$ques$50=function(other){var $$8,self=this,$ret_or_1=nil;return!!$truthy(self["$equal?"](other))||($truthy(other["$instance_of?"](self.$class()))?self.hash["$=="](other.$instance_variable_get("@hash")):!!$truthy($truthy($ret_or_1=other["$is_a?"]($$($nesting,"Set")))?self.$size()["$=="](other.$size()):$ret_or_1)&&$send(other,"all?",[],(($$8=function(o){var self=null==$$8.$$s?this:$$8.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash["$include?"](o)}).$$s=self,$$8.$$arity=1,$$8)))},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$add",$Set_disjoint$ques$50=function(o){var $writer=[o,!0];return $send(this.hash,"[]=",Opal.to_a($writer)),$rb_minus($writer.length,1),this},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,"<<","add"),Opal.def($Set_to_a$51,"$classify",$Set_classify$10=function(){var $$11,$$12,$iter=$Set_classify$10.$$p,block=$iter||nil,result=nil;return $iter&&($Set_classify$10.$$p=null),$iter&&($Set_classify$10.$$p=null),block===nil?this.$enum_for("classify"):(result=$send($$($nesting,"Hash"),"new",[],(($$11=function(h,k){var $writer,self=null==$$11.$$s?this:$$11.$$s;return null==h&&(h=nil),null==k&&(k=nil),$writer=[k,self.$class().$new()],$send(h,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]}).$$s=this,$$11.$$arity=2,$$11)),$send(this,"each",[],(($$12=function(item){null==$$12.$$s||$$12.$$s;return null==item&&(item=nil),result["$[]"](Opal.yield1(block,item)).$add(item)}).$$s=this,$$12.$$arity=1,$$12)),result)},$Set_classify$10.$$arity=0),Opal.def($Set_to_a$51,"$collect!",$Set_collect$excl$13=function(){var $$14,$iter=$Set_collect$excl$13.$$p,block=$iter||nil,result=nil;return $iter&&($Set_collect$excl$13.$$p=null),$iter&&($Set_collect$excl$13.$$p=null),block===nil?this.$enum_for("collect!"):(result=this.$class().$new(),$send(this,"each",[],(($$14=function(item){null==$$14.$$s||$$14.$$s;return null==item&&(item=nil),result["$<<"](Opal.yield1(block,item))}).$$s=this,$$14.$$arity=1,$$14)),this.$replace(result))},$Set_collect$excl$13.$$arity=0),$alias($Set_to_a$51,"map!","collect!"),Opal.def($Set_to_a$51,"$delete",$Set_disjoint$ques$50=function(o){return this.hash.$delete(o),this},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$delete?",$Set_disjoint$ques$50=function(o){return $truthy(this["$include?"](o))?(this.$delete(o),this):nil},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$delete_if",$Set_delete_if$17=function(){var $$18,$$19,$iter=$Set_delete_if$17.$$p,$yield=$iter||nil;return $iter&&($Set_delete_if$17.$$p=null),$yield===nil?this.$enum_for("delete_if"):($send($send(this,"select",[],(($$18=function(o){null==$$18.$$s||$$18.$$s;return null==o&&(o=nil),Opal.yield1($yield,o)}).$$s=this,$$18.$$arity=1,$$18)),"each",[],(($$19=function(o){var self=null==$$19.$$s?this:$$19.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}).$$s=this,$$19.$$arity=1,$$19)),this)},$Set_delete_if$17.$$arity=0),Opal.def($Set_to_a$51,"$keep_if",$Set_keep_if$20=function(){var $$21,$$22,$iter=$Set_keep_if$20.$$p,$yield=$iter||nil;return $iter&&($Set_keep_if$20.$$p=null),$yield===nil?this.$enum_for("keep_if"):($send($send(this,"reject",[],(($$21=function(o){null==$$21.$$s||$$21.$$s;return null==o&&(o=nil),Opal.yield1($yield,o)}).$$s=this,$$21.$$arity=1,$$21)),"each",[],(($$22=function(o){var self=null==$$22.$$s?this:$$22.$$s;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}).$$s=this,$$22.$$arity=1,$$22)),this)},$Set_keep_if$20.$$arity=0),Opal.def($Set_to_a$51,"$reject!",$Set_reject$excl$23=function(){var before,$iter=$Set_reject$excl$23.$$p,block=$iter||nil;return $iter&&($Set_reject$excl$23.$$p=null),$iter&&($Set_reject$excl$23.$$p=null),block===nil?this.$enum_for("reject!"):(before=this.$size(),$send(this,"delete_if",[],block.$to_proc()),this.$size()["$=="](before)?nil:this)},$Set_reject$excl$23.$$arity=0),Opal.def($Set_to_a$51,"$select!",$Set_select$excl$24=function(){var before,$iter=$Set_select$excl$24.$$p,block=$iter||nil;return $iter&&($Set_select$excl$24.$$p=null),$iter&&($Set_select$excl$24.$$p=null),block===nil?this.$enum_for("select!"):(before=this.$size(),$send(this,"keep_if",[],block.$to_proc()),this.$size()["$=="](before)?nil:this)},$Set_select$excl$24.$$arity=0),$alias($Set_to_a$51,"filter!","select!"),Opal.def($Set_to_a$51,"$add?",$Set_disjoint$ques$50=function(o){return $truthy(this["$include?"](o))?nil:this.$add(o)},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$each",$Set_each$26=function(){var $iter=$Set_each$26.$$p,block=$iter||nil;return $iter&&($Set_each$26.$$p=null),$iter&&($Set_each$26.$$p=null),block===nil?this.$enum_for("each"):($send(this.hash,"each_key",[],block.$to_proc()),this)},$Set_each$26.$$arity=0),Opal.def($Set_to_a$51,"$empty?",$Set_disjoint$ques$50=function(){return this.hash["$empty?"]()},$Set_disjoint$ques$50.$$arity=0),Opal.def($Set_to_a$51,"$eql?",$Set_disjoint$ques$50=function(other){var $$29;return this.hash["$eql?"]($send(other,"instance_eval",[],(($$29=function(){var self=null==$$29.$$s?this:$$29.$$s;return null==self.hash&&(self.hash=nil),self.hash}).$$s=this,$$29.$$arity=0,$$29)))},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$clear",$Set_disjoint$ques$50=function(){return this.hash.$clear(),this},$Set_disjoint$ques$50.$$arity=0),Opal.def($Set_to_a$51,"$include?",$Set_disjoint$ques$50=function(o){return this.hash["$include?"](o)},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,"member?","include?"),Opal.def($Set_to_a$51,"$merge",$Set_disjoint$ques$50=function(enum$){var $$33;return $send(enum$,"each",[],(($$33=function(item){var self=null==$$33.$$s?this:$$33.$$s;return null==item&&(item=nil),self.$add(item)}).$$s=this,$$33.$$arity=1,$$33)),this},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$replace",$Set_disjoint$ques$50=function(enum$){return this.$clear(),this.$merge(enum$),this},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$size",$Set_disjoint$ques$50=function(){return this.hash.$size()},$Set_disjoint$ques$50.$$arity=0),$alias($Set_to_a$51,"length","size"),Opal.def($Set_to_a$51,"$subtract",$Set_disjoint$ques$50=function(enum$){var $$37;return $send(enum$,"each",[],(($$37=function(item){var self=null==$$37.$$s?this:$$37.$$s;return null==item&&(item=nil),self.$delete(item)}).$$s=this,$$37.$$arity=1,$$37)),this},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$|",$Set_disjoint$ques$50=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$merge(enum$)},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$superset?",$Set_disjoint$ques$50=function(set){var $$40;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(this.$size(),set.$size()))&&$send(set,"all?",[],(($$40=function(o){var self=null==$$40.$$s?this:$$40.$$s;return null==o&&(o=nil),self["$include?"](o)}).$$s=this,$$40.$$arity=1,$$40))},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,">=","superset?"),Opal.def($Set_to_a$51,"$proper_superset?",$Set_disjoint$ques$50=function(set){var $$42;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(this.$size(),set.$size()))&&$send(set,"all?",[],(($$42=function(o){var self=null==$$42.$$s?this:$$42.$$s;return null==o&&(o=nil),self["$include?"](o)}).$$s=this,$$42.$$arity=1,$$42))},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,">","proper_superset?"),Opal.def($Set_to_a$51,"$subset?",$Set_disjoint$ques$50=function(set){var $$44;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(set.$size(),this.$size()))&&$send(this,"all?",[],(($$44=function(o){null==$$44.$$s||$$44.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$44.$$arity=1,$$44))},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,"<=","subset?"),Opal.def($Set_to_a$51,"$proper_subset?",$Set_disjoint$ques$50=function(set){var $$46;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(set.$size(),this.$size()))&&$send(this,"all?",[],(($$46=function(o){null==$$46.$$s||$$46.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$46.$$arity=1,$$46))},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,"<","proper_subset?"),Opal.def($Set_to_a$51,"$intersect?",$Set_disjoint$ques$50=function(set){var $$48,$$49;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),$truthy($rb_lt(this.$size(),set.$size()))?$send(this,"any?",[],(($$48=function(o){null==$$48.$$s||$$48.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,$$48.$$arity=1,$$48)):$send(set,"any?",[],(($$49=function(o){var self=null==$$49.$$s?this:$$49.$$s;return null==o&&(o=nil),self["$include?"](o)}).$$s=this,$$49.$$arity=1,$$49))},$Set_disjoint$ques$50.$$arity=1),Opal.def($Set_to_a$51,"$disjoint?",$Set_disjoint$ques$50=function(set){return this["$intersect?"](set)["$!"]()},$Set_disjoint$ques$50.$$arity=1),$alias($Set_to_a$51,"+","|"),$alias($Set_to_a$51,"union","|"),Opal.def($Set_to_a$51,"$to_a",$Set_to_a$51=function(){return this.hash.$keys()},$Set_to_a$51.$$arity=0)}($nesting[0],$nesting),function(self,$parent_nesting){var $Enumerable_to_set$52,self=$module(self,"Enumerable"),$nesting=[self].concat($parent_nesting);return Opal.def(self,"$to_set",$Enumerable_to_set$52=function($a,$b){var klass,$post_args=$Enumerable_to_set$52.$$p,block=$post_args||nil,self=this;return $post_args&&($Enumerable_to_set$52.$$p=null),$post_args&&($Enumerable_to_set$52.$$p=null),0<($post_args=Opal.slice.call(arguments,0,arguments.length)).length&&(klass=$post_args[0],$post_args.splice(0,1)),null==klass&&(klass=$$($nesting,"Set")),$send(klass,"new",[self].concat(Opal.to_a($post_args)),block.$to_proc())},$Enumerable_to_set$52.$$arity=-1),nil&&"to_set"}($nesting[0],$nesting)};
